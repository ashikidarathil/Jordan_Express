<%- include("../partials/admin/header") %>

<style>
  /* Reuse the same styles from your category page - unchanged */
  .form-label {
    font-size: 13px;
    color: #333;
    font-weight: 600;
    margin-bottom: 5px;
    margin-top: 8px;
    display: block;
  }

  .form-control {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    color: #333;
    outline: none;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }

  .form-control:focus {
    border-color: #895D39;
    box-shadow: 0 0 5px rgba(137, 93, 57, 0.3);
  }

  .error-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 2px;
    display: none;
  }

  .form-control.error {
    border-color: #e74c3c;
  }

  .content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .content-title {
    font-size: 24px;
    color: #333;
    font-weight: 600;
  }

  .card-header {
    background-color: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }

  .input-group {
    display: flex;
    align-items: center;
  }

  .input-group input {
    flex: 1;
    border: none;
    outline: none;
    padding: 8px;
    font-size: 14px;
  }

  .input-group button {
    background-color: #895D39;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 50px;
    margin-left: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .input-group button:hover {
    background-color: #6e4a2d;
  }

  .table {
    width: 100%;
    border-collapse: collapse;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .table th,
  .table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #f0f0f0;
  }

  .table th {
    font-weight: 500;
    color: #777;
    font-size: 14px;
  }

  .table td {
    color: #333;
  }

  .btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .btn-submit {
    background-color: #895D39;
    color: white;
    padding: 8px 16px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 8px;
    border: none;
    margin-bottom: 12px;
  }

  .btn-submit:hover {
    background-color: #6f4f34;
  }

  .btn-danger {
    background-color: #e74c3c;
    color: white;
  }

  .btn-danger:hover {
    background-color: #c0392b;
  }

  .btn-success {
    background-color: #2ecc71;
    color: white;
  }

  .btn-success:hover {
    background-color: #27ae60;
  }

  .btn-info {
    background-color: #17a2b8;
    color: white;
  }

  .btn-info:hover {
    background-color: #138496;
  }

  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }

  .pagination .page-link {
    padding: 8px 16px;
    border: 1px solid #ddd;
    border-radius: 3px;
    color: #555;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .pagination .page-link:hover {
    background-color: #895D39;
    color: white;
    border-color: #895D39;
  }

  .page-item {
    list-style: none;
  }
</style>

<div class="content-header">
  <h2 class="content-title">Coupons</h2>
</div>

<header class="card-header">
  <form id="searchForm" action="/admin/coupons" method="get" class="d-inline">
    <div class="input-group">
      <input type="text" class="form-control" placeholder="Search coupons" name="search" value="<%= search || '' %>">
      <button class="btn btn-primary" type="submit">Search</button>
      <% if (search) { %>
        <button type="button" class="btn btn-danger" onclick="resetSearch()">Cancel</button>
      <% } %>
    </div>
  </form>
</header>

<div class="card">
  <div class="card-body">
    <div class="row">
      <div class="col-md-3">
        <form method="post" action="/admin/coupons/add" onsubmit="return handleAddCoupon(event)">
          <div class="mb-4">
            <label for="coupon_name" class="form-label">Coupon Code</label>
            <input type="text" name="name" placeholder="e.g., SAVE10" class="form-control" id="coupon_name">
            <div id="name-error" class="error-message"></div>
          </div>
          <div class="mb-4">
            <label for="expire_on" class="form-label">Expiration Date</label>
            <input type="date" name="expireOn" class="form-control" id="expire_on" min="<%= new Date().toISOString().split('T')[0] %>">
            <div id="expire-error" class="error-message"></div>
          </div>
          <div class="mb-4">
            <label for="offer_price" class="form-label">Offer Price (₹)</label>
            <input type="number" name="offerPrice" placeholder="e.g., 100" class="form-control" id="offer_price" min="0">
            <div id="offer-error" class="error-message"></div>
          </div>
          <div class="mb-4">
            <label for="minimum_price" class="form-label">Minimum Purchase (₹)</label>
            <input type="number" name="minimumPrice" placeholder="e.g., 500" class="form-control" id="minimum_price" min="0">
            <div id="minimum-error" class="error-message"></div>
          </div>
          <div class="d-grid">
            <button class="btn-submit" type="submit">Add Coupon</button>
          </div>
        </form>
      </div>
      <div class="col-md-9">
        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Coupon Code</th>
                <th>Expiration Date</th>
                <th>Offer Price</th>
                <th>Minimum Purchase</th>
                <th>Status</th> <!-- Updated column header -->
                <th>List/Unlist</th>
                <th>Edit</th>
                <th>Delete</th>
              </tr>
            </thead>
            <tbody>
              <% if (coupons.length > 0) { %>
                <% coupons.forEach(coupon => { %>
                  <tr>
                    <td><%= coupon.name %></td>
                    <td><%= coupon.expireOn.toLocaleDateString() %></td>
                    <td>₹<%= coupon.offerPrice.toFixed(2) %></td>
                    <td>₹<%= coupon.minimumPrice.toFixed(2) %></td>
                    <td>
                      <% if (coupon.status === 'Active') { %>
                        <span class="badge rounded-pill alert-success" style="background-color: #2ecc71; border-radius: 100px; font-size: 12px; color: white; padding: 8px 10px;">Active</span>
                      <% } else { %>
                        <span class="badge rounded-pill alert-danger" style="background-color: #e74c3c; border-radius: 100px; font-size: 12px; color: white; padding: 8px 10px;">Inactive</span>
                      <% } %>
                    </td>
                    <td>
                      <% if (coupon.isList) { %>
                        <button class="btn btn-danger" onclick="toggleCouponStatus('<%= coupon._id %>', 'unlist')">Unlist</button>
                      <% } else { %>
                        <button class="btn btn-success" onclick="toggleCouponStatus('<%= coupon._id %>', 'list')">List</button>
                      <% } %>
                    </td>
                    <td>
                      <button class="btn btn-info" onclick="showEditModal('<%= coupon._id %>', '<%= coupon.name %>', `<%= coupon.expireOn.toISOString().split('T')[0] %>`, '<%= coupon.offerPrice %>', '<%= coupon.minimumPrice %>')">Edit</button>
                    </td>
                    <td>
                      <button class="btn btn-danger" onclick="deleteCoupon('<%= coupon._id %>')">Delete</button>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="8" class="text-center">No coupons found.</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Edit Coupon Modal -->
<div id="editCouponModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
  <div style="background: white; margin: 10% auto; padding: 20px; width: 90%; max-width: 500px; border-radius: 8px;">
    <h3>Edit Coupon</h3>
    <form id="editCouponForm" onsubmit="return handleEditCoupon(event)">
      <input type="hidden" name="id" id="editCouponId">
      <div class="mb-4">
        <label for="edit_name" class="form-label">Coupon Code</label>
        <input type="text" name="name" class="form-control" id="edit_name">
        <div id="edit-name-error" class="error-message"></div>
      </div>
      <div class="mb-4">
        <label for="edit_expire_on" class="form-label">Expiration Date</label>
        <input type="date" name="expireOn" class="form-control" id="edit_expire_on" min="<%= new Date().toISOString().split('T')[0] %>">
        <div id="edit-expire-error" class="error-message"></div>
      </div>
      <div class="mb-4">
        <label for="edit_offer_price" class="form-label">Offer Price (₹)</label>
        <input type="number" name="offerPrice" class="form-control" id="edit_offer_price" min="0">
        <div id="edit-offer-error" class="error-message"></div>
      </div>
      <div class="mb-4">
        <label for="edit_minimum_price" class="form-label">Minimum Purchase (₹)</label>
        <input type="number" name="minimumPrice" class="form-control" id="edit_minimum_price" min="0">
        <div id="edit-minimum-error" class="error-message"></div>
      </div>
      <button type="submit" class="btn-submit">Update Coupon</button>
      <button type="button" class="btn btn-danger" onclick="closeEditModal()">Cancel</button>
    </form>
  </div>
</div>

<nav aria-label="Page navigation">
  <ul class="pagination" style="margin-top: 20px;">
    <% if (currentPage > 1) { %>
      <li class="page-item">
        <a class="page-link" href="/admin/coupons?page=<%= currentPage - 1 %>&search=<%= search %>" aria-label="Previous">
          <span aria-hidden="true">«</span>
        </a>
      </li>
    <% } %>
    <% for (let i = 1; i <= totalPages; i++) { %>
      <li class="page-item <%= currentPage === i ? 'active' : '' %>">
        <a class="page-link" href="/admin/coupons?page=<%= i %>&search=<%= search %>"><%= i %></a>
      </li>
    <% } %>
    <% if (currentPage < totalPages) { %>
      <li class="page-item">
        <a class="page-link" href="/admin/coupons?page=<%= currentPage + 1 %>&search=<%= search %>" aria-label="Next">
          <span aria-hidden="true">»</span>
        </a>
      </li>
    <% } %>
  </ul>
</nav>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  function resetSearch() {
    document.querySelector('input[name="search"]').value = '';
    document.getElementById('searchForm').submit();
  }

  function handleAddCoupon(event) {
    event.preventDefault();
    if (!validateAddForm()) return;

    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);

    fetch('/admin/coupons/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire('Success', data.message, 'success').then(() => location.reload());
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      })
      .catch(error => {
        console.error('Error adding coupon:', error);
        Swal.fire('Error', 'Failed to add coupon', 'error');
      });
  }

  function validateAddForm() {
    clearErrorMessages();
    let isValid = true;

    const name = document.getElementById('coupon_name').value.trim();
    const expireOn = document.getElementById('expire_on').value;
    const offerPrice = parseFloat(document.getElementById('offer_price').value);
    const minimumPrice = parseFloat(document.getElementById('minimum_price').value);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expireDate = new Date(expireOn);

    if (!name) {
        displayErrorMessage('name-error', 'Coupon code is required');
        isValid = false;
    } else {
        // New validation for coupon name
        const couponRegex = /^[A-Z]{4}\d{3}$/;
        if (!couponRegex.test(name)) {
            displayErrorMessage('name-error', 'Coupon must be 7 characters: 4 uppercase letters followed by 3 numbers (e.g., SAVE123)');
            isValid = false;
        }
    }
    if (!expireOn || expireDate < today) {
      displayErrorMessage('expire-error', 'Expiration date cannot be before today');
      isValid = false;
    }
    if (!offerPrice || offerPrice <= 0) {
      displayErrorMessage('offer-error', 'Offer price must be greater than 0');
      isValid = false;
    }
    if (!minimumPrice || minimumPrice <= 0) {
      displayErrorMessage('minimum-error', 'Minimum purchase must be greater than 0');
      isValid = false;
    }
    if (offerPrice >= minimumPrice) {
      displayErrorMessage('offer-error', 'Offer price must be less than the minimum purchase amount');
      isValid = false;
    }

    return isValid;
  }

  function showEditModal(id, name, expireOn, offerPrice, minimumPrice) {
    document.getElementById('editCouponId').value = id;
    document.getElementById('edit_name').value = name;
    document.getElementById('edit_expire_on').value = expireOn;
    document.getElementById('edit_offer_price').value = offerPrice;
    document.getElementById('edit_minimum_price').value = minimumPrice;
    document.getElementById('editCouponModal').style.display = 'block';
  }

  function closeEditModal() {
    document.getElementById('editCouponModal').style.display = 'none';
  }

  function handleEditCoupon(event) {
    event.preventDefault();
    if (!validateEditForm()) return;

    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);

    fetch(`/admin/coupons/edit/${data.id}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire('Success', data.message, 'success').then(() => location.reload());
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      })
      .catch(error => {
        console.error('Error editing coupon:', error);
        Swal.fire('Error', 'Failed to update coupon', 'error');
      });
  }

  function validateEditForm() {
    clearErrorMessages('edit');
    let isValid = true;

    const name = document.getElementById('edit_name').value.trim();
    const expireOn = document.getElementById('edit_expire_on').value;
    const offerPrice = parseFloat(document.getElementById('edit_offer_price').value);
    const minimumPrice = parseFloat(document.getElementById('edit_minimum_price').value);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expireDate = new Date(expireOn);

    if (!name) {
        displayErrorMessage('edit-name-error', 'Coupon code is required');
        isValid = false;
    } else {
        const couponRegex = /^[A-Z]{4}\d{3}$/;
        if (!couponRegex.test(name)) {
            displayErrorMessage('edit-name-error', 'Coupon must be 7 characters: 4 uppercase letters followed by 3 numbers (e.g., SAVE123)');
            isValid = false;
        }
    }
    if (!expireOn || expireDate < today) {
      displayErrorMessage('edit-expire-error', 'Expiration date cannot be before today');
      isValid = false;
    }
    if (!offerPrice || offerPrice <= 0) {
      displayErrorMessage('edit-offer-error', 'Offer price must be greater than 0');
      isValid = false;
    }
    if (!minimumPrice || minimumPrice <= 0) {
      displayErrorMessage('edit-minimum-error', 'Minimum purchase must be greater than 0');
      isValid = false;
    }
    if (offerPrice >= minimumPrice) {
      displayErrorMessage('edit-offer-error', 'Offer price must be less than the minimum purchase amount');
      isValid = false;
    }

    return isValid;
  }

  function deleteCoupon(id) {
    Swal.fire({
      title: 'Are you sure?',
      text: 'This action will permanently delete the coupon from the database. This cannot be undone!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, delete it!'
    }).then(result => {
      if (result.isConfirmed) {
        fetch(`/admin/coupons/delete/${id}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Deleted!', data.message, 'success').then(() => location.reload());
            } else {
              Swal.fire('Error', data.message, 'error');
            }
          })
          .catch(error => {
            console.error('Error deleting coupon:', error);
            Swal.fire('Error', 'Failed to delete coupon', 'error');
          });
      }
    });
  }

  function toggleCouponStatus(id, action) {
    Swal.fire({
      title: `Are you sure you want to ${action} this coupon?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: action === 'unlist' ? '#d33' : '#28a745',
      cancelButtonColor: '#3085d6',
      confirmButtonText: `Yes, ${action} it!`
    }).then(result => {
      if (result.isConfirmed) {
        fetch(`/admin/coupons/toggle/${id}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Success!', data.message, 'success').then(() => location.reload());
            } else {
              Swal.fire('Error', data.message, 'error');
            }
          })
          .catch(error => {
            console.error('Error toggling coupon status:', error);
            Swal.fire('Error', 'Failed to toggle coupon status', 'error');
          });
      }
    });
  }

  function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = 'block';
  }

  function clearErrorMessages(prefix = '') {
    const errorElements = document.querySelectorAll(`.${prefix ? prefix + '-' : ''}error-message`);
    errorElements.forEach(element => {
      element.textContent = '';
      element.style.display = 'none';
    });
  }
</script>

<%- include("../partials/admin/footer") %>