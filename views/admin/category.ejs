<%- include("../partials/admin/header") %>

  <style>
    /* Label Styling */
    .form-label {
      font-size: 13px;
      color: #333;
      font-weight: 600;
      margin-bottom: 5px;
      margin-top: 8px;
      display: block;
    }

    .form-label{
        font-weight: 800;
        font-size: 14px;
      }

    /* Input Field Styling */
    .form-control {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 14px;
      color: #333;
      outline: none;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus {
      border-color: #895D39;
      box-shadow: 0 0 5px rgba(137, 93, 57, 0.3);
    }

    /* Error Message Styling */
    .error-message {
      color: #e74c3c;
      font-size: 12px;
      margin-top: 2px;
      display: none;
      /* Hidden by default */
    }

    /* Error State for Input Field */
    .form-control.error {
      border-color: #e74c3c;
    }

    .form-control.error:focus {
      border-color: #e74c3c;
      box-shadow: 0 0 5px rgba(231, 76, 60, 0.3);
    }



    .content-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .content-title {
      font-size: 24px;
      color: #333;
      font-weight: 600;
    }

    .card-header {
      background-color: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
    }

    .input-group {
      display: flex;
      align-items: center;
    }

    .input-group input {
      flex: 1;
      border: none;
      outline: none;
      padding: 8px;
      font-size: 14px;
    }

    a {
      text-decoration: none;
      color: white;
    }

    .input-group button {
      background-color: #895D39;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 50px;
      margin-left: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .input-group button:hover {
      background-color: #6e4a2d;
    }

    .table {
      width: 100%;
      border-collapse: collapse;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .table th,
    .table td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid #f0f0f0;
    }

    .table th {
      font-weight: 500;
      color: #777;
      font-size: 14px;
    }

    .table td {
      color: #333;
    }

    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: background-color 0.3s ease;
    }

    .btn-submit {
      background-color: #895D39;
      color: white;
      padding: 8px 16px;
      border-radius: 5px;
      cursor: pointer;
      margin-top: 8px;
      border: none;
      margin-bottom: 12px;
    }

    .btn-submit:hover {
      background-color: #6f4f34;
    }

    .btn-danger {
      background-color: #e74c3c;
      color: white;
    }

    .btn-danger:hover {
      background-color: #c0392b;
    }

    .btn-success {
      background-color: #2ecc71;
      color: white;
    }

    .btn-success:hover {
      background-color: #27ae60;
    }

    .btn-info {
      background-color: #17a2b8;
      color: white;
    }

    .btn-info:hover {
      background-color: #138496;
    }

    /* Pagination Styling */
    .pagination {
      display: flex;
      justify-content: center;
      margin-top: 20px;
    }

    .pagination .page-item {
      margin: 0 5px;
    }

    .pagination .page-link {
      padding: 8px 16px;
      border: 1px solid #ddd;
      border-radius: 3px;
      color: #555;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .pagination .page-link:hover {
      background-color: #895D39;
      color: white;
      border-color: #895D39;
    }

    .page-item {
      list-style: none;
    }

    .page-link {
      padding: 0.5rem 1rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      color: #895D39;
      text-decoration: none;
      transition: background-color 0.3s, color 0.3s;
    }
  </style>

  <div class="content-header">
    <h2 class="content-title">Category</h2>
  </div>

  <header class="card-header">
    <form id="searchForm" action="/admin/category" method="get" class="d-inline">
      <div class="input-group">
        <input type="text" class="form-control" placeholder="Search categories" name="search"
          value="<%= search || '' %>">
        <button class="btn btn-primary" type="submit">Search</button>
        <!-- Cancel/Reset Button -->
        <% if (search) { %>
          <button type="button" class="btn btn-danger" onclick="resetSearch()">Cancel</button>
          <% } %>
      </div>
    </form>
  </header>

  <div class="card">
    <div class="card-body">
      <div class="row">
        <div class="col-md-3">
          <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
            <div class="mb-4">
              <label for="product_name" class="form-label">Name</label>
              <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name">
              <div id="name-error" class="error-message"></div>
            </div>
            <div class="mb-4">
              <label class="form-label">Description</label>
              <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId"></textarea>
              <div id="description-error" class="error-message"></div>
            </div>
            <div class="d-grid">
              <button class="btn-submit" type="submit">Create category</button>
            </div>
          </form>
        </div>
        <div class="col-md-9">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Description</th>
                  <th>Offer Price</th>
                  <th>Offer</th>
                  <th>Status</th>
                  <th>List/Unlist</th>
                  <th class="text-start">Edit</th>
                  <th>Soft Delete</th> <!-- New column for soft delete -->
                </tr>
              </thead>
              <tbody>
                <% if (cat.length> 0) { %>
                  <% cat.forEach((category)=> { %>
                    <tr>
                      <td>
                        <%= category.name %>
                      </td>
                      <td>
                        <%= category.description %>
                      </td>
                      <td>
                        <%= category.categoryOffer ? `${category.categoryOffer}%` : '0%' %>
                      </td>
                      <td>
                        <% if (!category.categoryOffer) { %>
                          <button class="btn btn-info text-white" onclick="addOffer('<%= category._id %>')">Add
                            Offer</button>
                          <% } else { %>
                            <button class="btn btn-info text-white"
                              onclick="removeOffer('<%= category._id %>')">Remove</button>
                            <% } %>
                      </td>
                      <td>
                        <% if (category.isListed) { %>
                          <span class="badge rounded-pill alert-success"
                            style="background-color: #2ecc71; border-radius: 100px; font-size: 12px; color: white; padding: 8px 10px;">Listed</span>
                          <% } else { %>
                            <span class="badge rounded-pill alert-danger"
                              style="background-color: #e74c3c; border-radius: 100px; font-size: 12px; color: white; padding: 8px 10px;">Unlisted</span>
                            <% } %>
                      </td>
                      <td>
                        <% if (category.isListed) { %>
                          <button class="btn btn-danger" onclick="confirmUnlist('<%= category._id %>')">Unlist</button>
                        <% } else { %>
                          <button class="btn btn-success" onclick="confirmList('<%= category._id %>')">List</button>
                        <% } %>
                      </td>
                      <td>
                        <a href="/admin/editCategory/?id=<%= category._id %>" class="btn btn-info text-white">Edit</a>
                      </td>
                      <td>
                        <form id="softDeleteForm-<%= category._id %>" action="/admin/category/soft-delete/<%= category._id %>" method="POST" style="display: inline;">
                          <button type="button" class="btn btn-danger soft-delete-btn" data-id="<%= category._id %>">
                            Soft Delete
                          </button>
                        </form>
                      </td
 
                    </tr>
                    <% }); %>
                      <% } else { %>
                        <tr>
                          <td colspan="7" class="text-center" style="text-align: center;">No categories found.</td>
                        </tr>
                        <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <nav aria-label="Page navigation">
    <ul class="pagination" style="margin-top: 20px;">
      <% if (currentPage> 1) { %>
        <li class="page-item">
          <a class="page-link" href="/admin/category?page=<%= currentPage - 1 %>&search=<%= search %>"
            aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
          </a>
        </li>
        <% } %>

          <% for (let i=1; i <=totalPages; i++) { %>
            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
              <a class="page-link" href="/admin/category?page=<%= i %>&search=<%= search %>">
                <%= i %>
              </a>
            </li>
            <% } %>

              <% if (currentPage < totalPages) { %>
                <li class="page-item">
                  <a class="page-link" href="/admin/category?page=<%= currentPage + 1 %>&search=<%= search %>"
                    aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
                <% } %>
    </ul>
  </nav>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>

    // Add event listeners to all soft delete buttons
    document.querySelectorAll('.soft-delete-btn').forEach(button => {
      button.addEventListener('click', function () {
        const categoryId = this.getAttribute('data-id'); // Get the category ID from the data-id attribute

        // SweetAlert confirmation dialog
        Swal.fire({
          title: 'Are you sure?',
          text: 'You are about to soft delete this category. This action cannot be undone!',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel'
        }).then((result) => {
          if (result.isConfirmed) {
            // If the user confirms, submit the form
            document.getElementById(`softDeleteForm-${categoryId}`).submit();
          }
        });
      });
    });



    function resetSearch() {
      // Clear the search input
      document.querySelector('input[name="search"]').value = '';
      // Submit the form to reload the page without the search query
      document.getElementById('searchForm').submit();

    }

    function handleFormSubmit(event) {
      event.preventDefault();

      if (!validateForm()) {
        return;
      }

      const name = document.getElementsByName('name')[0].value;
      const description = document.getElementById('descriptionId').value;
      const submitButton = event.target.querySelector('.btn-submit');
      submitButton.disabled = true; // Prevent multiple submissions

      fetch('/admin/addCategory', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, description }),
      })
        .then((response) => {
          if (!response.ok) {
            return response.json().then((err) => { throw new Error(err.error || 'Network error'); });
          }
          return response.json();
        })
        .then((data) => {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: data.message,
            timer: 1500,
            heightAuto: false,
            scrollbarPadding: false,
          }).then(() => {
            location.reload();
          });
        })
        .catch((err) => {
          Swal.fire({
            icon: 'error',
            title: 'Oops',
            text: err.message || 'Something went wrong',
            timer: 1500,
            heightAuto: false,
            scrollbarPadding: false,
          });
        })
        .finally(() => {
          submitButton.disabled = false; // Re-enable button
        });
    }

    function validateForm() {
      clearErrorMessage();
      const name = document.getElementsByName('name')[0].value.trim();
      const description = document.getElementById('descriptionId').value.trim();
      let isValid = true;

      if (!name) {
        displayErrorMessage('name-error', 'Please enter a name');
        isValid = false;
      }

      if (!description) {
        displayErrorMessage('description-error', 'Please enter a description');
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerHTML = message;
      errorElement.style.display = 'block';
    }

    function clearErrorMessage() {
      const errorElements = document.getElementsByClassName('error-message');
      Array.from(errorElements).forEach((element) => {
        element.innerHTML = '';
        element.style.display = 'none';
      });
    }

    async function addOffer(categoryId) {
      const { value: amount } = await Swal.fire({
        title: 'Offer in percentage',
        input: 'number',
        inputLabel: 'Percentage',
        inputPlaceholder: '%',
        heightAuto: false,
        scrollbarPadding: false,
        inputAttributes: {
          min: 0,
          max: 100,
          step: 1,
        },
      });

      if (amount) {
        try {
          const response = await fetch('/admin/addCategoryOffer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              percentage: amount,
              categoryId: categoryId,
            }),
          });

          const data = await response.json();

          if (response.ok && data.success) {
            Swal.fire('Offer added', 'The offer has been added', 'success').then(() => {
              location.reload();
            });
          } else {
            Swal.fire('Failed', data.message || 'Adding offer failed', 'error');
          }
        } catch (error) {
          Swal.fire('Error', 'An error occurred while adding the offer', 'error');
          console.error('Error adding offer:', error);
        }
      }
    }

    async function removeOffer(categoryId) {
      try {
        const response = await fetch('/admin/removeCategoryOffer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            categoryId: categoryId,
          }),
        });

        const data = await response.json();

        if (response.ok && data.status) {
          Swal.fire('Offer removed', 'The offer has been removed', 'success').then(() => {
            location.reload();
          });
        } else {
          Swal.fire('Failed', data.message || 'Removing offer failed', 'error');
        }
      } catch (error) {
        Swal.fire('Error', 'An error occurred while removing the offer', 'error');
        console.error('Error removing offer:', error);
      }
    }




      // Function to handle listing a category
  function confirmList(categoryId) {
    Swal.fire({
      title: 'Are you sure?',
      text: 'You are about to list this category.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#28a745',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, list it!'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/admin/unListCategory?id=${categoryId}`, { method: 'GET' })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Listed!', 'The category has been listed.', 'success').then(() => {
                location.reload(); // Reload the page to reflect changes
              });
            } else {
              Swal.fire('Error', data.message || 'Failed to list the category.', 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error', 'An error occurred while listing the category.', 'error');
          });
      }
    });
  }

  // Function to handle unlisting a category
  function confirmUnlist(categoryId) {
    Swal.fire({
      title: 'Are you sure?',
      text: 'You are about to unlist this category.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#28a745',
      confirmButtonText: 'Yes, unlist it!'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/admin/listCategory?id=${categoryId}`, { method: 'GET' })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Unlisted!', 'The category has been unlisted.', 'success').then(() => {
                location.reload(); // Reload the page to reflect changes
              });
            } else {
              Swal.fire('Error', data.message || 'Failed to unlist the category.', 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error', 'An error occurred while unlisting the category.', 'error');
          });
      }
    });
  }


  </script>