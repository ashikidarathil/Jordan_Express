<%- include('../partials/user/header') %>

  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | Jordan Express</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
      }

      body {
        background-color: #f5f5f5;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        gap: 20px;
        margin-top: 50px;
        margin-bottom: 100px;
      }

      .checkout-left {
        flex: 2;
      }

      .checkout-right {
        flex: 1;
        max-width: 350px;
        margin-top: 75px;
      }

      .section {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
      }

      h1 {
        font-size: 24px;
        margin-bottom: 10px;
      }

      .breadcrumb {
        font-size: 16px;
        color: #888;
        margin-bottom: 25px;
        font-weight: 600;
        margin-top: 10px;
        margin-left: 2px;
      }

      .breadcrumb a {
        color: #333;
        text-decoration: none;
      }

      .breadcrumb a:hover {
        text-decoration: underline;
      }

      .section h2 {
        font-size: 18px;
        margin-bottom: 15px;
      }

      .btn {
        padding: 10px 20px;
        background-color: #8b5a2b;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
      }

      .error {
        border-color: #ff4444 !important;
      }

      .error-message {
        color: #ff4444;
        font-size: 12px;
        margin-top: 5px;
      }

      .btn:hover {
        background-color: #724a22;
      }

      .billing-address {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
        flex-wrap: wrap;
      }

      .address-card {
        flex: 1;
        min-width: 250px;
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        font-size: 14px;
        line-height: 1.5;
        background-color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
      }

      .address-card:hover {
        border-color: #8b5a2b;
      }

      .address-card.selected {
        border-color: #8b5a2b;
        background-color: #faf7f2;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .address-card.selected::after {
        content: 'âœ“';
        position: absolute;
        top: 10px;
        right: 10px;
        color: #8b5a2b;
        font-size: 20px;
      }

      .address-card h3 {
        font-size: 16px;
        margin-bottom: 10px;
      }

      .edit-btn {
        background: none;
        border: 1px solid #8b5a2b;
        color: #8b5a2b;
        padding: 5px 15px;
        font-size: 12px;
        margin-top: 10px;
        cursor: pointer;
        border-radius: 4px;
        transition: all 0.3s ease;
      }

      .edit-btn:hover {
        background-color: #8b5a2b;
        color: #fff;
      }

      .order-summary {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin-top: -22px;
      }

      .order-summary h2 {
        margin-top: 10px;
        margin-bottom: 20px;
      }

      .order-details {
        font-size: 14px;
        margin-bottom: 20px;
      }

      .order-details p {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
      }

      .order-details p.total {
        font-weight: bold;
        font-size: 16px;
      }

      .place-order-btn {
        width: 100%;
        padding: 15px;
        background-color: #8b5a2b;
        color: #fff;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        font-weight: 600;
      }

      .place-order-btn:hover {
        background-color: #724a22;
      }

      .cart-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 15px 0;
        border-bottom: 1px solid #ddd;
      }

      .cart-item img {
        width: 60px;
        height: 60px;
        object-fit: cover;
      }

      .item-details h3 {
        font-size: 16px;
        margin-bottom: 5px;
      }

      .item-details p {
        color: #888;
        margin-bottom: 5px;
        font-weight: 500;
        font-size: 13px;
      }

      .payment-methods label {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 14px;
        margin-bottom: 10px;
      }

      .item-details .total-price {
        color: #724a22;
        font-weight: 600;
      }

      .checkout-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
      }

      .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      .close-modal {
        float: right;
        font-size: 24px;
        cursor: pointer;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        font-size: 14px;
      }

      .form-group input,
      .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      .coupon-section {
        margin-bottom: 20px;
      }

      .coupon-input {
        display: flex;
        gap: 10px;
        align-items: center;
      }

      .coupon-input input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      .coupon-input button {
        padding: 8px 15px;
        background-color: #8b5a2b;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .coupon-input button:hover {
        background-color: #724a22;
      }

      .coupon-message {
        font-size: 12px;
        margin-top: 5px;
      }

      .coupon-success {
        color: #155724;
      }

      .coupon-error {
        color: #dc3545;
      }

      .coupon-list::-webkit-scrollbar {
        width: 6px;
      }

      .coupon-list::-webkit-scrollbar-thumb {
        background-color: #8b5a2b;
        border-radius: 4px;
      }

      .coupon-item {
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #faf7f2;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
      }

      .coupon-item:hover {
        border-color: #8b5a2b;
        background-color: #f5efe7;
      }

      .apply-coupon-btn,
      .remove-coupon-btn {
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        font-size: 12px;
        cursor: pointer;
      }

      .apply-coupon-btn {
        background-color: #8b5a2b;
        color: #fff;
      }

      .apply-coupon-btn:hover {
        background-color: #724a22;
      }

      .remove-coupon-btn {
        background-color: #dc3545;
        color: #fff;
      }

      .remove-coupon-btn:hover {
        background-color: #c82333;
      }

      .cod-message {
        font-size: 12px;
        color: #dc3545;
        margin-top: -8px;
        margin-left: 24px;
        margin-bottom: 10px;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  </head>

  <body>
    <div class="container">
      <div class="checkout-left">
        <div class="breadcrumb">
          <a href="/cart">Cart</a> > Checkout
        </div>

        <div class="section">
          <h2>Shipping Address</h2>
          <div class="billing-address">
            <% if (addresses && addresses.address.length> 0) { %>
              <% addresses.address.forEach((address, index)=> { %>
                <div class="address-card" data-index="<%= index %>" data-id="<%= address._id %>">
                  <h3>
                    <%= address.label %>
                  </h3>
                  <p>
                    <%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.zipCode %>, <%=
                              address.country %>
                  </p>
                  <p>Phone: <%= address.phone %>
                  </p>
                  <button class="edit-btn">Edit Address</button>
                </div>
                <% }) %>
                  <% } else { %>
                    <p>No addresses available. Please add one.</p>
                    <% } %>
          </div>
          <button class="btn" id="addNewAddressBtn">Add New Address</button>
        </div>

        <div class="section">
          <h2>Order Items</h2>
          <% cartItems.forEach(item=> { %>
            <% item.size.forEach(sizeItem=> { %>
              <div class="cart-item">
                <img src="/uploads/product-image/<%= item.productID.productImage[0] %>"
                  alt="<%= item.productID.productName %>" style="width: 140px;">
                <div class="item-details">
                  <h3>
                    <%= item.productID.productName %> (Size: <%= sizeItem.size %>)
                  </h3>
                  <p>Quantity: <%= sizeItem.quantity %>
                  </p>
                  <p class="total-price">Price: <%= new Intl.NumberFormat('en-IN', { style: 'currency' , currency: 'INR'
                      , minimumFractionDigits: 0, maximumFractionDigits: 0 }).format((sizeItem.quantity *
                      item.price).toFixed(2)) %>
                  </p>
                </div>
              </div>
              <% }) %>
                <% }) %>
        </div>
      </div>

      <div class="checkout-right">
        <div class="order-summary">
          <h2>Order Summary</h2>
          <div class="coupon-section">
            <h3 style="font-size: 16px; margin-bottom: 15px;">Available Coupons</h3>
            <% if (coupons && coupons.length> 0) { %>
              <div class="coupon-list" style="max-height: 150px; overflow-y: auto; margin-bottom: 15px;">
                <% coupons.forEach(coupon=> { %>
                  <div class="coupon-item" data-coupon="<%= coupon.name %>">
                    <div>
                      <p style="font-weight: 600; color: #8b5a2b;">
                        <%= coupon.name %>
                      </p>
                      <p style="font-size: 12px; color: #555;">Save â‚¹<%= coupon.offerPrice %> (Min. â‚¹<%=
                            coupon.minimumPrice %>)</p>
                    </div>
                    <button class="apply-coupon-btn">Apply</button>
                  </div>
                  <% }) %>
              </div>
              <% } else { %>
                <p style="font-size: 14px; color: #888; margin-bottom: 8px;">No coupons available for this order amount.
                </p>
                <% } %>
                  <div class="coupon-input" style="display: flex; gap: 10px; align-items: center;">
                    <input type="text" id="couponCode" placeholder="Enter coupon code"
                      style="flex: 1; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                    <button id="applyCouponBtn"
                      style="padding: 8px 15px; background-color: #8b5a2b; color: #fff; border: none; border-radius: 4px; cursor: pointer;">Apply</button>
                  </div>
                  <p id="couponMessage" class="coupon-message" style="font-size: 12px; margin-top: 5px;"></p>
          </div>
          <div class="payment-methods" style="margin-bottom: 20px;">
            <label>
              <input type="radio" name="payment" value="COD" id="codOption">
              Cash On Delivery
            </label>
            <p id="codMessage" class="cod-message" style="display: none;">COD is only available for orders below â‚¹5000
            </p>
            <label>
              <input type="radio" name="payment" value="Razorpay">
              Razorpay (Online Payment)
            </label>
            <label>
              <input type="radio" name="payment" value="Wallet">
              Wallet <span>(Balance: <%= new Intl.NumberFormat('en-IN', { style: 'currency' , currency: 'INR'
                  }).format(walletBalance) %>)</span>
            </label>
          </div>
          <div class="order-details">
            <% 
              const baseSubtotal = subtotal / 1.18;
              const gstSubtotal = subtotal - baseSubtotal;
              const baseDelivery = deliveryCharge / 1.18;
              const gstDelivery = deliveryCharge - baseDelivery;
              const baseTotal = total / 1.18;
              const gstTotal = total - baseTotal;
            %>
            <p><span>Subtotal (Excl. GST)</span> <span id="subtotalBase">
                <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(baseSubtotal.toFixed(2)) %>
            </span></p>
            <p><span>GST (18%) on Subtotal</span> <span id="subtotalGST">
                <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(gstSubtotal.toFixed(2)) %>
            </span></p>
            <p><span>Subtotal (Incl. GST)</span> <span id="subtotal">
                <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(subtotal.toFixed(2)) %>
            </span></p>

            <p><span>Delivery Charge (Incl. GST)</span> <span id="deliveryCharge">
                <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(deliveryCharge.toFixed(2)) %>
            </span></p>
            <p><span>Discount</span> <span id="discount">
                <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(discount.toFixed(2)) %>
            </span></p>
            <p class="total"><span>Total (Incl. GST):</span> <span id="total">
                <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(total.toFixed(2)) %>
            </span></p>

          </div>
          <button class="place-order-btn" id="placeOrderBtn">Place Order</button>
        </div>
 
        </div>
      </div>
    </div>

    <!-- Add Address Modal -->
    <div id="addAddressModal" class="checkout-modal">
      <div class="modal-content">
        <span class="close-modal">Ã—</span>
        <h3 style="margin-bottom: 15px;">Add New Shipping Address</h3>
        <form id="addAddressForm">
          <div class="form-group">
            <label>Label (e.g., Home, Office)</label>
            <input type="text" name="label">
          </div>
          <div class="form-group">
            <label>Street Address</label>
            <input type="text" name="street">
          </div>
          <div class="form-group">
            <label>City</label>
            <input type="text" name="city">
          </div>
          <div class="form-group">
            <label>State</label>
            <input type="text" name="state">
          </div>
          <div class="form-group">
            <label>Postal Code</label>
            <input type="text" name="zipCode">
          </div>
          <div class="form-group">
            <label>Country</label>
            <input type="text" name="country">
          </div>
          <div class="form-group">
            <label>Phone Number</label>
            <input type="tel" name="phone">
          </div>
          <button type="submit" class="btn">Save Address</button>
        </form>
      </div>
    </div>

    <!-- Edit Address Modal -->
    <div id="editAddressModal" class="checkout-modal">
      <div class="modal-content">
        <span class="close-modal">Ã—</span>
        <h3 style="margin-bottom: 15px;">Edit Shipping Address</h3>
        <form id="editAddressForm">
          <input type="hidden" name="addressId" id="editAddressId">
          <div class="form-group">
            <label>Label</label>
            <input type="text" name="label" id="editLabel">
          </div>
          <div class="form-group">
            <label>Street Address</label>
            <input type="text" name="street" id="editStreet">
          </div>
          <div class="form-group">
            <label>City</label>
            <input type="text" name="city" id="editCity">
          </div>
          <div class="form-group">
            <label>State</label>
            <input type="text" name="state" id="editState">
          </div>
          <div class="form-group">
            <label>Postal Code</label>
            <input type="text" name="zipCode" id="editZipCode">
          </div>
          <div class="form-group">
            <label>Country</label>
            <input type="text" name="country" id="editCountry">
          </div>
          <div class="form-group">
            <label>Phone Number</label>
            <input type="tel" name="phone" id="editPhone">
          </div>
          <button type="submit" class="btn">Update Address</button>
        </form>
      </div>
    </div>

    <script>
      let addressesData = [];
      let selectedAddressIndex = 0;
      let appliedCoupon = null;

      document.addEventListener('DOMContentLoaded', () => {
        loadCheckoutAddresses();
        document.getElementById('addNewAddressBtn')?.addEventListener('click', showAddAddressModal);
        document.querySelectorAll('.close-modal').forEach(btn => btn.addEventListener('click', closeModals));
        window.addEventListener('click', (e) => {
          if (e.target.classList.contains('checkout-modal')) closeModals();
        });
        document.getElementById('addAddressForm')?.addEventListener('submit', handleAddAddressSubmit);
        document.getElementById('editAddressForm')?.addEventListener('submit', handleEditAddressSubmit);
        document.getElementById('placeOrderBtn')?.addEventListener('click', placeOrder);
        document.getElementById('applyCouponBtn')?.addEventListener('click', () => applyCoupon());
        setupCouponListeners();
        setupRealTimeValidation();
        updateCouponUI();
        updateCODAvailability();
      });

      function updateCODAvailability() {
        const totalElement = document.getElementById('total').textContent;
        const total = parseFloat(totalElement.replace(/[^0-9.]/g, ''));
        const codOption = document.getElementById('codOption');
        const codLabel = codOption.parentElement;
        const codMessage = document.getElementById('codMessage');

        if (total >= 5000) {
          codOption.disabled = true;
          codLabel.style.opacity = '0.5';
          codLabel.style.cursor = 'not-allowed';
          codMessage.style.display = 'block';
          if (codOption.checked) {
            document.querySelector('input[name="payment"][value="Razorpay"]').checked = true;
          }
        } else {
          codOption.disabled = false;
          codLabel.style.opacity = '1';
          codLabel.style.cursor = 'pointer';
          codMessage.style.display = 'none';
        }
      }

      function setupCouponListeners() {
        const applyButtons = document.querySelectorAll('.apply-coupon-btn');
        applyButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            const couponCode = e.target.closest('.coupon-item').getAttribute('data-coupon');
            applyCoupon(couponCode);
          });
        });
      }

      function updateCouponUI() {
        const applyButtons = document.querySelectorAll('.apply-coupon-btn');
        const couponInput = document.getElementById('couponCode');
        const applyCouponBtn = document.getElementById('applyCouponBtn');

        if (appliedCoupon) {
          applyButtons.forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.5';
            btn.style.cursor = 'not-allowed';
          });
          couponInput.disabled = true;
          applyCouponBtn.disabled = true;
          couponInput.style.opacity = '0.5';
          applyCouponBtn.style.opacity = '0.5';
          applyCouponBtn.style.cursor = 'not-allowed';
        } else {
          applyButtons.forEach(btn => {
            btn.disabled = false;
            btn.style.opacity = '1';
            btn.style.cursor = 'pointer';
          });
          couponInput.disabled = false;
          applyCouponBtn.disabled = false;
          couponInput.style.opacity = '1';
          applyCouponBtn.style.opacity = '1';
          applyCouponBtn.style.cursor = 'pointer';
        }

        updateCODAvailability(); // Update COD availability after coupon changes
      }

      async function applyCoupon(couponCodeFromList = null) {
        const couponCode = couponCodeFromList || document.getElementById('couponCode').value.trim();
        const messageElement = document.getElementById('couponMessage');
        const couponInputSection = document.querySelector('.coupon-input');

        if (!couponCode) {
          messageElement.textContent = 'Please enter a coupon code';
          messageElement.className = 'coupon-message coupon-error';
          return;
        }

        if (appliedCoupon) {
          messageElement.textContent = 'Only one coupon can be applied at a time. Remove the current coupon to apply a new one.';
          messageElement.className = 'coupon-message coupon-error';
          return;
        }

        try {
          const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ couponCode })
          });
          const data = await response.json();

          if (data.success) {
            appliedCoupon = data.couponCode;
            const discount = data.discount;
            const total = data.total;
            const deliveryCharge = data.deliveryCharge;

            document.getElementById('discount').textContent =
              new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(discount.toFixed(2));
            document.getElementById('total').textContent =
              new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(total.toFixed(2));
            document.getElementById('deliveryCharge').textContent =
              new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(deliveryCharge.toFixed(2));

            messageElement.textContent = 'Coupon applied successfully!';
            messageElement.className = 'coupon-message coupon-success';
            couponInputSection.style.display = 'none';

            document.querySelectorAll('.coupon-item').forEach(item => {
              const button = item.querySelector('button');
              if (item.getAttribute('data-coupon') === appliedCoupon) {
                button.textContent = 'Remove';
                button.classList.remove('apply-coupon-btn');
                button.classList.add('remove-coupon-btn');
                button.removeEventListener('click', applyCoupon);
                button.addEventListener('click', removeCoupon);
              }
            });

            updateCouponUI();
          } else {
            messageElement.textContent = data.message;
            messageElement.className = 'coupon-message coupon-error';
            appliedCoupon = null;
            couponInputSection.style.display = 'flex';
          }
        } catch (error) {
          console.error('Error applying coupon:', error);
          messageElement.textContent = 'Failed to apply coupon';
          messageElement.className = 'coupon-message coupon-error';
          appliedCoupon = null;
          couponInputSection.style.display = 'flex';
        }
      }

      async function removeCoupon() {
        const messageElement = document.getElementById('couponMessage');
        const couponInputSection = document.querySelector('.coupon-input');

        try {
          const response = await fetch('/remove-coupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({})
          });
          const data = await response.json();

          if (data.success) {
            document.getElementById('discount').textContent =
              new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(data.discount.toFixed(2));
            document.getElementById('total').textContent =
              new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(data.total.toFixed(2));
            document.getElementById('deliveryCharge').textContent =
              new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(data.deliveryCharge.toFixed(2));

            messageElement.textContent = 'Coupon removed successfully!';
            messageElement.className = 'coupon-message coupon-success';
            couponInputSection.style.display = 'flex';
            appliedCoupon = null;

            document.querySelectorAll('.coupon-item').forEach(item => {
              const button = item.querySelector('button');
              if (button.classList.contains('remove-coupon-btn')) {
                button.textContent = 'Apply';
                button.classList.remove('remove-coupon-btn');
                button.classList.add('apply-coupon-btn');
                button.removeEventListener('click', removeCoupon);
                button.addEventListener('click', () => applyCoupon(item.getAttribute('data-coupon')));
              }
            });

            updateCouponUI();
          } else {
            messageElement.textContent = data.message;
            messageElement.className = 'coupon-message coupon-error';
          }
        } catch (error) {
          console.error('Error removing coupon:', error);
          messageElement.textContent = 'Failed to remove coupon';
          messageElement.className = 'coupon-message coupon-error';
        }
      }

      async function loadCheckoutAddresses() {
        try {
          const response = await fetch('/api/checkout/addresses');
          const data = await response.json();
          if (data.success) {
            const addresses = data.addresses.address || [];
            addressesData = addresses.map((addr, index) => ({
              id: addr._id,
              index,
              label: addr.label,
              street: addr.street,
              city: addr.city,
              state: addr.state,
              zipCode: String(addr.zipCode),
              country: addr.country,
              phone: addr.phone
            }));
            renderAddresses(addresses);
          } else {
            console.error('Failed to load addresses:', data.message);
            showErrorAlert('Failed to load addresses. Please try again.');
          }
        } catch (error) {
          console.error('Error loading addresses:', error);
          showErrorAlert('Failed to load addresses. Please try again.');
        }
      }

      function renderAddresses(addresses) {
        const addressContainer = document.querySelector('.billing-address');
        if (!addressContainer) return;

        addressContainer.innerHTML = addresses.length === 0
          ? '<p>No addresses available. Please add one.</p>'
          : '';

        addresses.forEach((address, index) => {
          const card = document.createElement('div');
          card.className = 'address-card';
          card.setAttribute('data-index', index);
          card.setAttribute('data-id', address._id);
          if (index === parseInt(selectedAddressIndex)) {
            card.classList.add('selected');
          }
          card.innerHTML = `
          <h3>${address.label}</h3>
          <p>${address.street}, ${address.city}, ${address.state}, ${String(address.zipCode)}, ${address.country}</p>
          <p>Phone: ${address.phone}</p>
          <button class="edit-btn">Edit Address</button>
        `;
          card.addEventListener('click', function (e) {
            if (e.target.classList.contains('edit-btn')) return;
            document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
            this.classList.add('selected');
            selectedAddressIndex = this.getAttribute('data-index');
          });
          card.querySelector('.edit-btn').addEventListener('click', () => editAddress(index));
          addressContainer.appendChild(card);
        });
      }

      function showAddAddressModal() {
        document.getElementById('addAddressForm').reset();
        document.getElementById('addAddressModal').style.display = 'block';
      }

      function editAddress(index) {
        const addressData = addressesData[index];
        if (!addressData) return;

        showEditAddressModal(addressData.id, addressData);
      }

      function showEditAddressModal(addressId, addressData) {
        document.getElementById('editAddressId').value = addressId;
        document.getElementById('editLabel').value = addressData.label || '';
        document.getElementById('editStreet').value = addressData.street || '';
        document.getElementById('editCity').value = addressData.city || '';
        document.getElementById('editState').value = addressData.state || '';
        document.getElementById('editZipCode').value = addressData.zipCode || '';
        document.getElementById('editCountry').value = addressData.country || '';
        document.getElementById('editPhone').value = addressData.phone || '';
        document.getElementById('editAddressModal').style.display = 'block';
      }

      function closeModals() {
        document.getElementById('addAddressModal').style.display = 'none';
        document.getElementById('editAddressModal').style.display = 'none';
      }

      function validateField(field) {
        const value = field.value.trim();
        let isValid = true;
        let errorMessage = '';

        if (!value) {
          isValid = false;
          errorMessage = 'Please fill this field';
        } else {
          switch (field.name) {
            case 'label':
              isValid = value.length >= 2;
              errorMessage = 'Label must be at least 2 characters';
              break;
            case 'street':
              isValid = value.length >= 5;
              errorMessage = 'Street must be at least 5 characters';
              break;
            case 'city':
            case 'state':
            case 'country':
              isValid = value.length >= 2;
              errorMessage = 'Must be at least 2 characters';
              break;
            case 'zipCode':
              isValid = /^\d{5,10}$/.test(value);
              errorMessage = 'Enter valid postal code (5-10 digits)';
              break;
            case 'phone':
              isValid = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/.test(value);
              if (isValid) {
                const digitsOnly = value.replace(/[^0-9]/g, '');
                if (/^0+$/.test(digitsOnly)) {
                  isValid = false;
                  errorMessage = 'Phone number cannot consist of all zeros';
                } else {
                  errorMessage = 'Enter valid phone number';
                }
              } else {
                errorMessage = 'Enter valid phone number';
              }
              break;
          }
        }

        const formGroup = field.closest('.form-group');
        if (!formGroup) return;

        const existingError = formGroup.querySelector('.error-message');
        if (existingError) existingError.remove();
        field.classList.remove('error');

        if (!isValid) {
          field.classList.add('error');
          const errorElement = document.createElement('p');
          errorElement.className = 'error-message';
          errorElement.style.color = 'red';
          errorElement.style.fontSize = '12px';
          errorElement.style.marginTop = '5px';
          errorElement.textContent = errorMessage;
          formGroup.appendChild(errorElement);
        }

        return isValid;
      }

      function setupRealTimeValidation() {
        document.querySelectorAll('#addAddressForm input, #editAddressForm input').forEach(input => {
          input.addEventListener('blur', function () {
            validateField(this);
          });
          input.addEventListener('input', function () {
            validateField(this);
          });
        });
      }

      async function handleAddAddressSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const inputs = form.querySelectorAll('input');
        let isFormValid = true;

        inputs.forEach(input => {
          if (!validateField(input)) {
            isFormValid = false;
          }
        });

        if (!isFormValid) return;

        try {
          const formData = new FormData(form);
          const addressData = Object.fromEntries(formData.entries());

          const response = await fetch('/api/checkout/addresses', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(addressData)
          });

          const data = await response.json();

          if (data.success) {
            await showSuccessAlert('Address added successfully');
            await loadCheckoutAddresses();
            closeModals();
          } else {
            await showErrorAlert(data.message || 'Failed to add address');
          }
        } catch (error) {
          console.error('Error adding address:', error);
          await showErrorAlert('An error occurred while adding the address');
        }
      }

      async function handleEditAddressSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const inputs = form.querySelectorAll('input:not([type="hidden"])');
        let isFormValid = true;

        inputs.forEach(input => {
          if (!validateField(input)) {
            isFormValid = false;
          }
        });

        if (!isFormValid) return;

        try {
          const formData = new FormData(form);
          const formDataObj = Object.fromEntries(formData.entries());
          const addressId = formDataObj.addressId;
          delete formDataObj.addressId;

          const response = await fetch(`/api/checkout/addresses/${addressId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formDataObj)
          });

          const data = await response.json();

          if (data.success) {
            await showSuccessAlert('Address updated successfully');
            await loadCheckoutAddresses();
            closeModals();
          } else {
            await showErrorAlert(data.message || 'Failed to update address');
          }
        } catch (error) {
          console.error('Error updating address:', error);
          await showErrorAlert('An error occurred while updating the address');
        }
      }


      async function placeOrder() {
    try {
      const selectedAddress = document.querySelector('.address-card.selected');
      if (!selectedAddress) {
        await showErrorAlert('Please select a shipping address');
        return;
      }

      const cartItems = document.querySelectorAll('.cart-item');
      if (cartItems.length === 0) {
        await showErrorAlert('Your cart is empty');
        return;
      }

      const paymentMethod = document.querySelector('input[name="payment"]:checked').value;
      const totalElement = document.getElementById('total').textContent;
      const total = parseFloat(totalElement.replace(/[^0-9.]/g, ''));

      if (paymentMethod === 'Razorpay') {
        const response = await fetch('/create-razorpay-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            addressIndex: selectedAddressIndex,
            couponCode: appliedCoupon,
          }),
        });
        const data = await response.json();

        if (!data.success) {
          await showErrorAlert(data.message || 'Failed to initiate payment');
          return;
        }

        let paymentCompleted = false;

        const options = {
          key: '<%= razorpayKeyId %>',
          amount: data.order.amount,
          currency: 'INR',
          name: 'Jordan Express',
          description: 'Order Payment',
          order_id: data.order.id,
          handler: async function (response) {
            paymentCompleted = true;
            const verifyResponse = await fetch('/verify-razorpay-payment', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                razorpay_order_id: response.razorpay_order_id,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_signature: response.razorpay_signature,
                addressIndex: selectedAddressIndex,
                couponCode: appliedCoupon,
                orderId: data.orderId
              }),
            });
            const verifyData = await verifyResponse.json();

            if (verifyData.success) {
              window.location.href = `/order-success/${verifyData.orderId}`;
            } else {
              console.error('Payment verification failed:', verifyData);
              window.location.href = `/payment-failure?orderId=${data.orderId}`;
            }
          },
          prefill: {
            name: '<%= user.name || "Customer" %>',
            email: '<%= user.email || "" %>',
          },
          theme: {
            color: '#8b5a2b',
          },
          modal: {
            ondismiss: async function () {
              if (!paymentCompleted) {
                console.log('Payment modal dismissed, orderId:', data.orderId);
                try {
                  await fetch('/cancel-razorpay-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId: data.orderId })
                  });
                } catch (error) {
                  console.error('Error cancelling payment:', error);
                }
                showErrorAlert('Payment cancelled');
                window.location.href = `/payment-failure?orderId=${data.orderId}`;
              }
            },
          },
        };

        const rzp = new Razorpay(options);

        rzp.on('payment.failed', function (response) {
          console.error('Payment failed, orderId:', data.orderId, 'Error:', response.error);
          showErrorAlert('Payment failed');
          window.location.href = `/payment-failure?orderId=${data.orderId}`;
        });

        rzp.open();
      } else {
        showSuccessAlert('Processing your order...');

        const response = await fetch('/place-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            addressIndex: selectedAddressIndex,
            paymentMethod,
            couponCode: appliedCoupon,
          }),
        });

        const data = await response.json();

        if (data.success) {
          await showSuccessAlert('Order placed successfully!');
          window.location.href = '/order-success/' + data.orderId;
        } else {
          await showErrorAlert(data.message || 'Failed to place order');
        }
      }
    } catch (error) {
      console.error('Error placing order:', error);
      await showErrorAlert('An error occurred while placing the order');
    }
  }


      async function showSuccessAlert(message) {
        await Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: message,
          confirmButtonColor: '#8b5a2b',
          heightAuto: false,
          scrollbarPadding: false
        });
      }

      async function showErrorAlert(message) {
        await Swal.fire({
          icon: 'error',
          title: 'Error',
          html: message,
          confirmButtonColor: '#8b5a2b',
          heightAuto: false,
          scrollbarPadding: false
        });
      }
    </script>
  </body>

  </html>

  <%- include('../partials/user/footer') %>