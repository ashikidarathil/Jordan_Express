<%- include('../partials/user/header') %>

  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | Jordan Express</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
      }

      body {
        background-color: #f5f5f5;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        gap: 20px;
        margin-top: 50px;
        margin-bottom: 100px;
      }

      .checkout-left {
        flex: 2;
      }

      .checkout-right {
        flex: 1;
        max-width: 350px;
        margin-top: 75px;
      }

      .section {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
      }

      h1 {
        font-size: 24px;
        margin-bottom: 10px;
      }

      .breadcrumb {
        font-size: 16px;
        color: #888;
        margin-bottom: 25px;
        font-weight: 600;
        margin-top: 10px;
        margin-left: 2px;
      }

      .breadcrumb a {
        color: #333;
        text-decoration: none;
      }

      .breadcrumb a:hover {
        text-decoration: underline;
      }

      .section h2 {
        font-size: 18px;
        margin-bottom: 15px;
      }

      .btn {
        padding: 10px 20px;
        background-color: #8b5a2b;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px
      }

      .error {
        border-color: #ff4444 !important;
      }

      .error-message {
        color: #ff4444;
        font-size: 12px;
        margin-top: 5px;
      }

      .btn:hover {
        background-color: #724a22;
      }

      .billing-address {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
        flex-wrap: wrap;
      }

      .address-card {
        flex: 1;
        min-width: 250px;
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        font-size: 14px;
        line-height: 1.5;
        background-color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
      }

      .address-card:hover {
        border-color: #8b5a2b;
      }

      .address-card.selected {
        border-color: #8b5a2b;
        background-color: #faf7f2;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .address-card.selected::after {
        content: 'âœ“';
        position: absolute;
        top: 10px;
        right: 10px;
        color: #8b5a2b;
        font-size: 20px;
      }

      .address-card h3 {
        font-size: 16px;
        margin-bottom: 10px;
      }

      .edit-btn {
        background: none;
        border: 1px solid #8b5a2b;
        color: #8b5a2b;
        padding: 5px 15px;
        font-size: 12px;
        margin-top: 10px;
        cursor: pointer;
        border-radius: 4px;
        transition: all 0.3s ease;
        margin-top: 10px;

      }

      .edit-btn:hover {
        background-color: #8b5a2b;
        color: #fff;
      }

      .order-summary {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin-top: -22px;
      }

      .order-summary h2 {
        margin-top: 10px;
        margin-bottom: 20px;
      }

      .order-details {
        font-size: 14px;
        margin-bottom: 20px;
      }

      .order-details p {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
      }

      .order-details p.total {
        font-weight: bold;
        font-size: 16px;
      }

      .place-order-btn {
        width: 100%;
        padding: 15px;
        background-color: #8b5a2b;
        color: #fff;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        font-weight: 600;
      }

      .place-order-btn:hover {
        background-color: #724a22;
      }

      .cart-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 15px 0;
        border-bottom: 1px solid #ddd;
      }

      .cart-item img {
        width: 60px;
        height: 60px;
        object-fit: cover;
      }

      .item-details h3 {
        font-size: 16px;
        margin-bottom: 5px;
      }

      .item-details p {
        color: #888;
        margin-bottom: 5px;
        font-weight: 500;
        font-size: 13px;
      }

      .payment-methods label {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 14px;
        margin-bottom: 10px;
      }

      .item-details .total-price {
        color: red;
        font-weight: 600;
      }


      .checkout-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
      }

      .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      .close-modal {
        float: right;
        font-size: 24px;
        cursor: pointer;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        font-size: 14px;
      }

      .form-group input,
      .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>

  <body>
    <div class="container">
      <div class="checkout-left">
        <!-- <h1 style="font-size: 28px;margin-bottom: 20px;">Checkout</h1> -->
        <div class="breadcrumb">
          <a href="/cart">Cart</a> > Checkout
        </div>

        <div class="section">
          <h2>Shipping Address</h2>
          <div class="billing-address">
            <% if (addresses && addresses.address.length> 0) { %>
              <% addresses.address.forEach((address, index)=> { %>
                <div class="address-card" data-index="<%= index %>" data-id="<%= address._id %>">
                  <h3>
                    <%= address.label %>
                  </h3>
                  <p>
                    <%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.zipCode %>, <%=
                              address.country %>
                  </p>
                  <p style="">Phone: <%= address.phone %>
                  </p>
                  <button class="edit-btn">Edit Address</button>
                </div>
                <% }) %>
                  <% } else { %>
                    <p>No addresses available. Please add one.</p>
                    <% } %>
          </div>
          <button class="btn" id="addNewAddressBtn">Add New Address</button>
        </div>

        <div class="section">
          <h2>Order Items</h2>
          <% cartItems.forEach(item=> { %>
            <% item.size.forEach(sizeItem=> { %>
              <div class="cart-item">
                <img src="/uploads/product-image/<%= item.productID.productImage[0] %>"
                  alt="<%= item.productID.productName %>" style="width: 140px;">
                <div class="item-details">
                  <h3>
                    <%= item.productID.productName %> (Size: <%= sizeItem.size %>)
                  </h3>
                  <p>Quantity: <%= sizeItem.quantity %>
                  </p>
                  <p class="total-price">Price: $<%= (sizeItem.quantity * item.price).toFixed(2) %>
                  </p>
                </div>
              </div>
              <% }) %>
                <% }) %>
        </div>
      </div>

      <div class="checkout-right">
        <div class="order-summary">
          <h2>Order Summary</h2>
          <div class="payment-methods" style="margin-bottom: 20px;">
            <label>
              <input type="radio" name="payment" value="COD" checked>
              Cash On Delivery
            </label>
          </div>
          <div class="order-details">
            <p><span>Subtotal</span> <span>$<%= subtotal.toFixed(2) %></span></p>
            <p><span>Shipping</span> <span>$0.00</span></p>
            <p><span>Discount</span> <span>$<%= discount.toFixed(2) %></span></p>
            <p class="total"><span>Total :</span> <span>$<%= total.toFixed(2) %></span></p>
          </div>
          <button class="place-order-btn" id="placeOrderBtn">Place Order</button>
        </div>
      </div>
    </div>

    <!-- Add Address Modal -->
    <div id="addAddressModal" class="checkout-modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h3 style="margin-bottom: 15px;">Add New Shipping Address</h3>
        <form id="addAddressForm">
          <div class="form-group">
            <label>Label (e.g., Home, Office)</label>
            <input type="text" name="label">
          </div>
          <div class="form-group">
            <label>Street Address</label>
            <input type="text" name="street">
          </div>
          <div class="form-group">
            <label>City</label>
            <input type="text" name="city">
          </div>
          <div class="form-group">
            <label>State</label>
            <input type="text" name="state">
          </div>
          <div class="form-group">
            <label>Postal Code</label>
            <input type="text" name="zipCode">
          </div>
          <div class="form-group">
            <label>Country</label>
            <input type="text" name="country">
          </div>
          <div class="form-group">
            <label>Phone Number</label>
            <input type="tel" name="phone">
          </div>
          <button type="submit" class="btn">Save Address</button>
        </form>
      </div>
    </div>

    <!-- Edit Address Modal -->
    <div id="editAddressModal" class="checkout-modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h3 style="margin-bottom: 15px;">Edit Shipping Address</h3>
        <form id="editAddressForm">
          <input type="hidden" name="addressId" id="editAddressId">
          <div class="form-group">
            <label>Label</label>
            <input type="text" name="label" id="editLabel">
          </div>
          <div class="form-group">
            <label>Street Address</label>
            <input type="text" name="street" id="editStreet">
          </div>
          <div class="form-group">
            <label>City</label>
            <input type="text" name="city" id="editCity">
          </div>
          <div class="form-group">
            <label>State</label>
            <input type="text" name="state" id="editState">
          </div>
          <div class="form-group">
            <label>Postal Code</label>
            <input type="text" name="zipCode" id="editZipCode">
          </div>
          <div class="form-group">
            <label>Country</label>
            <input type="text" name="country" id="editCountry">
          </div>
          <div class="form-group">
            <label>Phone Number</label>
            <input type="tel" name="phone" id="editPhone">
          </div>
          <button type="submit" class="btn">Update Address</button>
        </form>
      </div>
    </div>

    <script>
      // Store addresses data
      let addressesData = [];
      let selectedAddressIndex = 0;

      // Initialize when page loads
      document.addEventListener('DOMContentLoaded', () => {
        const addressCards = document.querySelectorAll('.address-card');
        if (addressCards.length > 0) {
          addressCards[0].classList.add('selected');
          addressCards.forEach((card, index) => {
            addressesData[index] = {
              id: card.getAttribute('data-id') || card.getAttribute('data-index'),
              index: index
            };
            card.addEventListener('click', function (e) {
              if (e.target.classList.contains('edit-btn')) return;
              addressCards.forEach(c => c.classList.remove('selected'));
              this.classList.add('selected');
              selectedAddressIndex = this.getAttribute('data-index');
            });
            const editBtn = card.querySelector('.edit-btn');
            if (editBtn) editBtn.addEventListener('click', () => editAddress(index));
          });
        } else {
          loadCheckoutAddresses();
        }

        document.getElementById('addNewAddressBtn')?.addEventListener('click', showAddAddressModal);
        document.querySelectorAll('.close-modal').forEach(btn => btn.addEventListener('click', closeModals));
        window.addEventListener('click', (e) => {
          if (e.target.classList.contains('checkout-modal')) closeModals();
        });

        document.getElementById('addAddressForm')?.addEventListener('submit', handleAddAddressSubmit);
        document.getElementById('editAddressForm')?.addEventListener('submit', handleEditAddressSubmit);
        document.getElementById('placeOrderBtn')?.addEventListener('click', placeOrder);

        setupRealTimeValidation();
      });

      // Load addresses from API
      async function loadCheckoutAddresses() {
        try {
          const response = await fetch('/api/checkout/addresses');
          const data = await response.json();
          if (data.success) {
            const addresses = data.addresses.address || [];
            addressesData = addresses.map((addr, index) => ({ id: addr._id, index }));
            renderAddresses(addresses);
          } else {
            console.error('Failed to load addresses:', data.message);
          }
        } catch (error) {
          console.error('Error loading addresses:', error);
          showErrorAlert('Failed to load addresses. Please try again.');
        }
      }

      // Render addresses to DOM
      function renderAddresses(addresses) {
        const addressContainer = document.querySelector('.billing-address');
        if (!addressContainer) return;

        addressContainer.innerHTML = addresses.length === 0
          ? '<p>No addresses available. Please add one.</p>'
          : '';

        addresses.forEach((address, index) => {
          const card = document.createElement('div');
          card.className = 'address-card';
          card.setAttribute('data-index', index);
          card.setAttribute('data-id', address._id);
          if (index === 0) {
            card.classList.add('selected');
            selectedAddressIndex = 0;
          }
          card.innerHTML = `
            <h3>${address.label}</h3>
            <p>${address.street}, ${address.city}, ${address.state}, ${address.zipCode}, ${address.country}</p>
            <p>Phone: ${address.phone}</p>
            <button class="edit-btn">Edit Address</button>
          `;
          card.addEventListener('click', function (e) {
            if (e.target.classList.contains('edit-btn')) return;
            document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
            this.classList.add('selected');
            selectedAddressIndex = this.getAttribute('data-index');
          });
          card.querySelector('.edit-btn').addEventListener('click', () => editAddress(index));
          addressContainer.appendChild(card);
        });
      }

      // Show add address modal
      function showAddAddressModal() {
        document.getElementById('addAddressForm').reset();
        document.getElementById('addAddressModal').style.display = 'block';
      }

      // Show edit address modal
      function editAddress(index) {
        const addressCard = document.querySelectorAll('.address-card')[index];
        if (!addressCard) return;

        const addressData = {
          label: addressCard.querySelector('h3').textContent.trim(),
          street: addressCard.querySelector('p').textContent.split(',')[0].trim(),
          city: addressCard.querySelector('p').textContent.split(',')[1].trim(),
          state: addressCard.querySelector('p').textContent.split(',')[2].trim(),
          zipCode: addressCard.querySelector('p').textContent.split(',')[3].trim(),
          country: addressCard.querySelector('p').textContent.split(',')[4].trim(),
          phone: addressCard.querySelector('p:nth-of-type(2)').textContent.replace('Phone:', '').trim()
        };

        const addressId = addressCard.getAttribute('data-id') || addressesData[index]?.id;
        showEditAddressModal(addressId, addressData);
      }

      function showEditAddressModal(addressId, addressData) {
        document.getElementById('editAddressId').value = addressId;
        if (addressData) {
          document.getElementById('editLabel').value = addressData.label || '';
          document.getElementById('editStreet').value = addressData.street || '';
          document.getElementById('editCity').value = addressData.city || '';
          document.getElementById('editState').value = addressData.state || '';
          document.getElementById('editZipCode').value = addressData.zipCode || '';
          document.getElementById('editCountry').value = addressData.country || '';
          document.getElementById('editPhone').value = addressData.phone || '';
        }
        document.getElementById('editAddressModal').style.display = 'block';
      }

      // Close all modals
      function closeModals() {
        document.getElementById('addAddressModal').style.display = 'none';
        document.getElementById('editAddressModal').style.display = 'none';
      }

      // Validate a single field
      function validateField(field) {
        const value = field.value.trim();
        let isValid = true;
        let errorMessage = '';

        if (!value) {
          isValid = false;
          errorMessage = 'Please fill this field';
        } else {
          switch (field.name) {
            case 'label':
              isValid = value.length >= 2;
              errorMessage = 'Label must be at least 2 characters';
              break;
            case 'street':
              isValid = value.length >= 5;
              errorMessage = 'Street must be at least 5 characters';
              break;
            case 'city':
            case 'state':
            case 'country':
              isValid = value.length >= 2;
              errorMessage = 'Must be at least 2 characters';
              break;
            case 'zipCode':
              isValid = /^\d{5,10}(?:[-\s]\d{4})?$/.test(value);
              errorMessage = 'Enter valid postal/zip code';
              break;
            case 'phone':
              isValid = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/.test(value);
              errorMessage = 'Enter valid phone number';
              break;
          }
        }

        const formGroup = field.closest('.form-group');
        if (!formGroup) return;

        const existingError = formGroup.querySelector('.error-message');
        if (existingError) existingError.remove();
        field.classList.remove('error');

        if (!isValid) {
          field.classList.add('error');
          const errorElement = document.createElement('p');
          errorElement.className = 'error-message';
          errorElement.style.color = 'red';
          errorElement.style.fontSize = '12px';
          errorElement.style.marginTop = '5px';
          errorElement.textContent = errorMessage;
          formGroup.appendChild(errorElement);
        }

        return isValid;
      }

      // Setup real-time validation
      function setupRealTimeValidation() {
        document.querySelectorAll('#addAddressForm input, #editAddressForm input').forEach(input => {
          input.addEventListener('blur', function () {
            validateField(this);
          });
          input.addEventListener('input', function () {
            validateField(this);
          });
        });
      }

      // Add address form handler
      async function handleAddAddressSubmit(e) {
        e.preventDefault();

        const form = e.target;
        const inputs = form.querySelectorAll('input');
        let isFormValid = true;

        inputs.forEach(input => {
          if (!validateField(input)) {
            isFormValid = false;
          }
        });

        if (!isFormValid) return;

        try {
          const formData = new FormData(form);
          const addressData = Object.fromEntries(formData.entries());

          const response = await fetch('/api/checkout/addresses', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(addressData)
          });

          const data = await response.json();

          if (data.success) {
            await showSuccessAlert('Address added successfully');
            loadCheckoutAddresses();
            closeModals();
          } else {
            await showErrorAlert(data.message || 'Failed to add address');
          }
        } catch (error) {
          console.error('Error adding address:', error);
          await showErrorAlert('An error occurred while adding the address');
        }
      }

      // Edit address form handler
      async function handleEditAddressSubmit(e) {
        e.preventDefault();

        const form = e.target;
        const inputs = form.querySelectorAll('input:not([type="hidden"])');
        let isFormValid = true;

        inputs.forEach(input => {
          if (!validateField(input)) {
            isFormValid = false;
          }
        });

        if (!isFormValid) return;

        try {
          const formData = new FormData(form);
          const formDataObj = Object.fromEntries(formData.entries());
          const addressId = formDataObj.addressId;
          delete formDataObj.addressId;

          const response = await fetch(`/api/checkout/addresses/${addressId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formDataObj)
          });

          const data = await response.json();

          if (data.success) {
            await showSuccessAlert('Address updated successfully');
            loadCheckoutAddresses();
            closeModals();
          } else {
            await showErrorAlert(data.message || 'Failed to update address');
          }
        } catch (error) {
          console.error('Error updating address:', error);
          await showErrorAlert('An error occurred while updating the address');
        }
      }

      // In checkout.ejs
      async function placeOrder() {
        try {
          const selectedAddress = document.querySelector('.address-card.selected');
          if (!selectedAddress) {
            await showErrorAlert('Please select a shipping address');
            return;
          }

          const cartItems = document.querySelectorAll('.cart-item');
          if (cartItems.length === 0) {
            await showErrorAlert('Your cart is empty');
            return;
          }

          const paymentMethod = document.querySelector('input[name="payment"]:checked').value;

          Swal.fire({
            title: 'Processing your order...',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
          });

          const response = await fetch('/place-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              addressIndex: selectedAddressIndex,
              paymentMethod: paymentMethod
            })
          });

          const data = await response.json();

          if (data.success) {
            await showSuccessAlert('Order placed successfully!');
            window.location.href = '/order-success/' + data.orderId; // Matches backend 'orderID'
          } else {
            await showErrorAlert(data.message || 'Failed to place order');
          }
        } catch (error) {
          console.error('Error placing order:', error);
          await showErrorAlert('An error occurred while placing the order');
        }
      }

      // Helper functions for alerts
      async function showSuccessAlert(message) {
        await Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: message,
          confirmButtonColor: '#8b5a2b',
          heightAuto: false,
          scrollbarPadding: false
        });
      }

      async function showErrorAlert(message) {
        await Swal.fire({
          icon: 'error',
          title: 'Error',
          html: message,
          confirmButtonColor: '#8b5a2b',
          heightAuto: false,
          scrollbarPadding: false
        });
      }
    </script>


  </body>

  </html>

  <%- include('../partials/user/footer') %>