<%- include("../partials/user/dasboard") %>
  <div class="content-area">
    <style>
      .content-area {
        padding: 20px;
      }

      .page-title {
        font-size: 1.8rem;
        margin-bottom: 20px;
        color: #2c3e50;
        display: flex;
        align-items: center;
      }

      .page-title i {
        margin-right: 10px;
      }

      .card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        padding: 20px;
        margin-bottom: 20px;
      }

      .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
      }

      .card-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #2c3e50;
      }

      .btn {
        text-decoration: none;
        padding: 8px 15px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        font-size: 13px;
        transition: all 0.3s ease;
      }

      .btn-delete {
        background-color: #dc3545;
        color: #eee;
      }

      .btn-primary {
        background-color: #3498db;
        color: white;
      }

      .btn-primary:hover {
        background-color: #2980b9;
      }

      .row {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        gap: 20px;
        margin: 0;
        padding: 0;
      }

      .col-md-6 {
        flex: none;
        max-width: none;
        width: 100%;
      }

      .address-card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        padding: 20px;
        margin-bottom: 20px;
        position: relative;
        height: 100%;
      }

      .address-card .default-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        background-color: #2ecc71;
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
      }

      .address-card h4 {
        margin-bottom: 10px;
        color: #2c3e50;
      }

      .address-card p {
        margin-bottom: 5px;
        color: #555;
      }

      .address-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
      }

      /* Modal Styles */
      .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1001;
        justify-content: center;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
      }

      .modal-content {
        background-color: white;
        padding: 30px;
        border-radius: 12px;
        width: 100%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      }

      .modal-title {
        text-align: center;
        margin-bottom: 25px;
        color: #2c3e50;
        font-size: 1.5rem;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        color: #34495e;
        font-weight: 500;
      }

      .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #d1d8e0;
        border-radius: 6px;
        font-size: 0.95rem;
      }

      .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 15px;
        margin-top: 25px;
      }

      .btn-cancel {
        background-color: #ecf0f1;
        color: #2c3e50;
        border: 1px solid #d1d8e0;
      }

      .btn-cancel:hover {
        background-color: #dfe4e6;
      }

      /* Validation Styles */
      .is-invalid {
        border-color: #dc3545 !important;
      }

      .invalid-feedback {
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.875em;
        color: #dc3545;
      }

      /* Responsive adjustments */
      @media (max-width: 768px) {
        .row {
          grid-template-columns: 1fr;
        }
      }
    </style>

    <h1 class="page-title">
      <i class="fas fa-map-marker-alt"></i>
      My Addresses
    </h1>

    <div class="card">
      <div class="card-header">
        <h3 class="card-title">Saved Addresses</h3>
        <button class="btn btn-primary" onclick="openAddressModal()">Add New Address</button>
      </div>

      <div class="row">
        <% if (userAddress && userAddress.address && userAddress.address.length> 0) { %>
          <% userAddress.address.forEach(address=> { %>
            <div class="col-md-6">
              <div class="address-card">
                <% if (address.isDefault) { %>
                  <span class="default-badge">Default</span>
                  <% } %>
                    <h4>
                      <%= address.label %>
                    </h4>
                    <p>
                      <%= user.name %>
                    </p>
                    <p>
                      <%= address.street %>
                    </p>
                    <p>
                      <%= address.city %>, <%= address.state %>
                          <%= address.zipCode %>
                    </p>
                    <p>
                      <%= address.country %>
                    </p>
                    <p>Phone: <%= address.phone %>
                    </p>

                    <div class="address-actions">
                      <a href="/edit-address?id=<%= address._id %>" class="btn btn-primary">Edit</a>
                      <button onclick="confirmDelete('<%= address._id %>')" class="btn btn-delete">Delete</button>

                      <% if (!address.isDefault) { %>
                        <!-- <button class="btn" onclick="setDefaultAddress('<%= address._id %>')">Set as Default</button> -->
                        <% } %>
                    </div>
              </div>
            </div>
            <% }) %>
              <% } else { %>
                <div class="col-md-12">
                  <p>No addresses saved yet.</p>
                </div>
                <% } %>
      </div>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="modal-overlay">
      <div class="modal-content">
        <h3 class="modal-title" id="modalTitle">Add New Address</h3>
        <form id="addressForm" action="/add-address" method="POST">
          <input type="hidden" name="addressId" id="addressId">

          <div class="form-group">
            <label for="label">Address Label (e.g., Home, Work)</label>
            <input type="text" class="form-control" id="label" name="label" placeholder="Enter address label">
          </div>

          <div class="form-group">
            <label for="street">Street Address</label>
            <input type="text" class="form-control" id="street" name="street" placeholder="Enter street address">
          </div>



          <div class="form-group">
            <label for="city">City</label>
            <input type="text" class="form-control" id="city" name="city" placeholder="Enter city">
          </div>


          <div class="form-group">
            <label for="state">State/Province</label>
            <input type="text" class="form-control" id="state" name="state" placeholder="Enter state">
          </div>




          <div class="form-group">
            <label for="zipCode">ZIP/Postal Code</label>
            <input type="text" class="form-control" id="zipCode" name="zipCode" placeholder="Enter ZIP code">
          </div>


          <div class="form-group">
            <label for="country">Country</label>
            <input type="text" class="form-control" id="country" name="country" placeholder="Enter country">
          </div>


          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="text" class="form-control" id="phone" name="phone" placeholder="Enter phone number">
          </div>

          <div class="form-group">
            <label>
              <!-- <input type="checkbox" name="isDefault"> Set as default address -->
            </label>
          </div>

          <div class="modal-actions">
            <a href="/address" class="btn btn-cancel">Cancel</a>
            <button type="submit" class="btn btn-primary">Save Address</button>
          </div>
        </form>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      // Address modal functions
      function openAddressModal(addressData) {
        const modal = document.getElementById('addressModal');
        const form = document.getElementById('addressForm');
        const title = document.getElementById('modalTitle');

        if (addressData) {
          title.textContent = 'Edit Address';
          document.getElementById('addressId').value = addressData._id;
          form.label.value = addressData.label;
          form.street.value = addressData.street;
          form.city.value = addressData.city;
          form.state.value = addressData.state;
          form.zipCode.value = addressData.zipCode;
          form.country.value = addressData.country;
          form.phone.value = addressData.phone;
          form.isDefault.checked = addressData.isDefault;
        } else {
          title.textContent = 'Add New Address';
          form.reset();
        }

        modal.style.display = 'flex';
      }

      // Delete confirmation function
      function confirmDelete(addressId) {
        Swal.fire({
          title: 'Are you sure?',
          text: "You won't be able to revert this!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = `/delete-address?id=${addressId}`;
          }
        });
      }

      // Form Validation
      document.getElementById('addressForm').addEventListener('submit', function (e) {
        e.preventDefault();

        // Get form elements
        const form = e.target;
        const label = form.label.value.trim();
        const street = form.street.value.trim();
        const city = form.city.value.trim();
        const state = form.state.value.trim();
        const zipCode = form.zipCode.value.trim();
        const country = form.country.value.trim();
        const phone = form.phone.value.trim();

        // Reset previous error states
        resetErrors();

        // Validate fields
        let isValid = true;

        // Label validation
        if (!label) {
          showError('label', 'Address label is required');
          isValid = false;
        } else if (label.length > 30) {
          showError('label', 'Label must be less than 30 characters');
          isValid = false;
        }

        // Street validation
        if (!street) {
          showError('street', 'Street address is required');
          isValid = false;
        } else if (street.length > 100) {
          showError('street', 'Street address must be less than 100 characters');
          isValid = false;
        }

        // City validation
        if (!city) {
          showError('city', 'City is required');
          isValid = false;
        } else if (city.length > 50) {
          showError('city', 'City must be less than 50 characters');
          isValid = false;
        }

        // State validation
        if (!state) {
          showError('state', 'State/Province is required');
          isValid = false;
        } else if (state.length > 50) {
          showError('state', 'State must be less than 50 characters');
          isValid = false;
        }

        // ZIP/Postal Code validation
        if (!zipCode) {
          showError('zipCode', 'ZIP/Postal Code is required');
          isValid = false;
        } else if (!/^[a-zA-Z0-9\- ]+$/.test(zipCode)) {
          showError('zipCode', 'Invalid ZIP/Postal Code format');
          isValid = false;
        }

        // Country validation
        if (!country) {
          showError('country', 'Country is required');
          isValid = false;
        } else if (country.length > 50) {
          showError('country', 'Country must be less than 50 characters');
          isValid = false;
        }

        // Phone validation
        if (!phone) {
          showError('phone', 'Phone number is required');
          isValid = false;
        } else if (!/^[\d\s\+\-\(\)]{6,20}$/.test(phone)) {
          showError('phone', 'Invalid phone number format');
          isValid = false;
        }

        // If all valid, submit the form
        if (isValid) {
          form.submit();
        }
      });

      function showError(fieldName, message) {
        const field = document.querySelector(`[name="${fieldName}"]`);
        const formGroup = field.closest('.form-group');

        // Add error class to input
        field.classList.add('is-invalid');

        // Create or update error message
        let errorElement = formGroup.querySelector('.invalid-feedback');
        if (!errorElement) {
          errorElement = document.createElement('div');
          errorElement.className = 'invalid-feedback';
          formGroup.appendChild(errorElement);
        }
        errorElement.textContent = message;
      }

      function resetErrors() {
        // Remove all error states and messages
        document.querySelectorAll('.is-invalid').forEach(el => {
          el.classList.remove('is-invalid');
        });
        document.querySelectorAll('.invalid-feedback').forEach(el => {
          el.remove();
        });
      }

      function setDefaultAddress(addressId) {
        fetch(`/dashboard/set-default-address/${addressId}`, {
          method: 'PUT'
        }).then(response => {
          if (response.ok) {
            location.reload();
          }
        });
      }

      // Close modal when clicking outside
      document.getElementById('addressModal').addEventListener('click', function (e) {
        if (e.target === this) {
          this.style.display = 'none';
        }
      });

      const urlParams = new URLSearchParams(window.location.search);
      const successParam = urlParams.get('success');

      if (successParam === 'true') {
        Swal.fire({
          title: 'Success!',
          text: 'Address added successfully',
          icon: 'success',
          confirmButtonText: 'OK'
        });

        // Clean up the URL
        const cleanUrl = window.location.pathname;
        window.history.replaceState({}, document.title, cleanUrl);
      }

    </script>
  </div>