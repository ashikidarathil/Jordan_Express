<%- include('../partials/user/dasboard') %>

<!DOCTYPE html>
<html lang="en">

<head>
  <style>
    /* Existing styles remain unchanged */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, sans-serif;
    }

    body {
      background-color: #f5f5f5;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }

    .order-title {
      font-size: 24px;
      color: #333;
    }

    .order-status {
      padding: 8px 15px;
      border-radius: 20px;
      font-weight: bold;
      font-size: 14px;
    }

    .status-pending {
      background-color: #FFF3CD;
      color: #856404;
    }

    .status-processing {
      background-color: #CCE5FF;
      color: #004085;
    }

    .status-shipped {
      background-color: #D4EDDA;
      color: #155724;
    }

    .status-delivered {
      background-color: #D4EDDA;
      color: #155724;
    }

    .status-cancelled {
      background-color: #F8D7DA;
      color: #721C24;
    }

    .status-returned {
      background-color: #138496;
      color: white;
    }

    .order-details-container {
      display: flex;
      gap: 20px;
      margin-bottom: 30px;
    }

    .order-section {
      flex: 1;
      background-color: #fff;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    .section-title {
      font-size: 18px;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid #eee;
    }

    .order-summary {
      background-color: #fff;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
      margin-bottom: 30px;
    }

    .order-items {
      background-color: #fff;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    .order-item {
      display: flex;
      padding: 15px 0;
      border-bottom: 1px solid #eee;
    }

    .order-item:last-child {
      border-bottom: none;
    }

    .item-image {
      width: 80px;
      height: 80px;
      object-fit: cover;
      margin-right: 15px;
      border-radius: 4px;
    }

    .item-details {
      flex: 1;
    }

    .item-name {
      font-size: 16px;
      margin-bottom: 5px;
    }

    .item-price {
      color: #8b5a2b;
      font-weight: bold;
      margin-bottom: 5px;
    }

    .item-quantity {
      color: #666;
      font-size: 14px;
    }

    .item-actions {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      justify-content: center;
    }

    .btn {
      padding: 8px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      margin-top: 5px;
      transition: all 0.3s ease;
    }

    .btn-cancel {
      margin-top: 15px;
      background-color: #dc3545;
      color: white;
    }

    .btn-cancel:hover {
      background-color: #c82333;
    }

    .btn-return {
      background-color: #17a2b8;
      color: white;
    }

    .btn-return:hover {
      background-color: #138496;
    }

    .btn-disabled {
      background-color: #6c757d;
      color: white;
      cursor: not-allowed;
    }

    .order-summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }

    .order-summary-label {
      color: #666;
    }

    .order-summary-value {
      font-weight: bold;
    }

    .order-summary-total {
      font-size: 18px;
      color: #8b5a2b;
      margin-top: 10px;
      padding-top: 10px;
      border-top: 1px solid #eee;
    }

    .address-details p {
      margin-bottom: 8px;
      line-height: 1.5;
    }

    .payment-details p {
      margin-bottom: 8px;
      line-height: 1.5;
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
      background-color: #fff;
      margin: 10% auto;
      padding: 20px;
      border-radius: 8px;
      width: 90%;
      max-width: 500px;
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .modal-title {
      font-size: 18px;
      font-weight: bold;
    }

    .close-modal {
      font-size: 24px;
      cursor: pointer;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 600;
    }

    .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }

    .form-group textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      resize: vertical;
      min-height: 100px;
    }

    .modal-footer {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 20px;
    }

    .btn-secondary {
      background-color: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background-color: #5a6268;
    }

    .btn-primary {
      background-color: #8b5a2b;
      color: white;
    }

    .btn-primary:hover {
      background-color: #724a22;
    }

    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
    }

    .invoice-btn {
      background-color: #4CAF50;
      margin-left: 10px;
    }

    .invoice-btn:hover {
      background-color: #45a049;
    }

    .btn-cancel {
      background-color: #bc0c1e;
      color: white;
    }

    .btn-invoice {
      background-color: #bc0c1e;
      color: white;
      border: none;
      padding: 8px 10px;
      border-radius: 5px;
    }

    .item-status {
      font-weight: bold;
      padding: 8px 15px;
      font-size: 14px;
      border-radius: 4px;
      text-align: left;
      margin-left: -15px;
    }

    .status-partially-returned {
      background-color: lightblue;
      color: black;
    }

    .status-partially-cancelled {
      background-color: rgba(243, 156, 18, 0.1);
      color: #f39c12;
    }

    .item-status-pending {
      color: #ff9800;
    }

    .item-status-processing {
      color: #2196f3;
    }

    .item-status-shipped {
      color: #673ab7;
    }

    .item-status-delivered {
      color: #4caf50;
    }

    .item-status-cancelled {
      color: #f44336;
    }

    .item-status-returned {
      color: #9b59b6;
    }

    .item-status-return-request {
      color: #ff5722;
    }

    .item-status-return-rejected {
      color: #9c27b0;
    }

    .char-counter {
      display: block;
      text-align: right;
      color: #666;
      font-size: 12px;
      margin-top: 5px;
    }

    .form-group textarea:invalid {
      border-color: #dc3545;
    }

    .status-return-request {
      background-color: #ffccbc;
      color: #d84315;
    }

    .status-return-rejected {
      background-color: #e0e0e0;
      color: red;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>

<body>
  <div class="container">
    <div class="order-header">
      <h1 class="order-title">Order #<%= orders.orderID %></h1>
    </div>

    <div class="invoice-actions" style="margin-top: 20px; text-align: right; margin-bottom: 20px;">
      <% if (orders.paymentStatus === 'Paid') { %>
        <button class="btn btn-invoice" onclick="window.location.href='/orders/<%= orders.orderID %>/invoice'">
          <i class="fas fa-file-download"></i> Download Invoice (PDF)
        </button>
      <% } %>
    </div>

    <div class="order-details-container">
      <div class="order-section">
        <h2 class="section-title">Delivery Address</h2>
        <div class="address-details">
          <p><strong><%= orders.address.label %></strong></p>
          <p><%= orders.address.street %></p>
          <p><%= orders.address.city %>, <%= orders.address.state %> <%= orders.address.zipCode %></p>
          <p><%= orders.address.country %></p>
          <p>Phone: <%= orders.address.phone %></p>
        </div>
      </div>
      <div class="order-section">
        <h2 class="section-title">Payment Method</h2>
        <div class="payment-details">
          <p><strong><%= orders.paymentMethod === 'COD' ? 'Cash on Delivery' : orders.paymentMethod %></strong></p>
          <p><strong>Payment Status:</strong>
            <% 
              let isPaidConditionMet = false;
              if (orders.paymentMethod === 'COD') {
                isPaidConditionMet = orders.orderItems.some(item => 
                  ['Delivered', 'Return Request', 'Returned', 'Return Rejected'].includes(item.status)
                );
              }
            %>
            <%= isPaidConditionMet ? 'Paid' : orders.paymentStatus %>
          </p>
          <p><strong>Order Date:</strong>
            <%= orders.createdOn.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
          </p>
          <% if ((orders.paymentStatus === 'Failed' && (orders.paymentMethod === 'Razorpay' )) 
                && orders.orderItems.some(item => item.status !== 'Cancelled')) { %>
            <button class="btn btn-primary retry-payment-btn" style="background-color: rgb(192, 21, 21);" data-order-id="<%= orders.orderID %>">Retry Payment</button>
          <% } %>
          <% 
    
          const hasCancelledItem = orders.orderItems.some(item => item.status === 'Cancelled');
          
     
          const activeItemCount = orders.orderItems.filter(item => item.status !== 'Cancelled').length;
          
    

          if (orders.paymentMethod === 'COD' && 
              orders.paymentStatus === 'Pending' && 
              orders.orderItems.some(item => ['Pending', 'Processing'].includes(item.status)) &&
              !(hasCancelledItem && orders.orderItems.length > 1)) { 
        %>
          <button class="btn btn-primary pay-now-btn" data-order-id="<%= orders.orderID %>" style="margin-top: 10px;">Pay Now</button>
        <% } %>
        </div>
      </div>
    </div>

    <div class="order-summary">
      <h2 class="section-title">Order Summary</h2>
      <% 
        const baseSubtotal = orders.totalPrice / 1.18;
        const gstSubtotal = orders.totalPrice - baseSubtotal;
        const baseDelivery = orders.deliveryCharge / 1.18;
        const gstDelivery = orders.deliveryCharge - baseDelivery;
        const baseFinal = orders.finalAmount / 1.18;
        const gstFinal = orders.finalAmount - baseFinal;
      %>
      <div class="order-summary-row">
        <span class="order-summary-label">Subtotal (Excl. GST):</span>
        <span class="order-summary-value">
          <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(baseSubtotal.toFixed(2)) %>
        </span>
      </div>
      <div class="order-summary-row">
        <span class="order-summary-label">GST (18%) on Subtotal:</span>
        <span class="order-summary-value">
          <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(gstSubtotal.toFixed(2)) %>
        </span>
      </div>
      <div class="order-summary-row">
        <span class="order-summary-label">Subtotal (Incl. GST):</span>
        <span class="order-summary-value">
          <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(orders.totalPrice.toFixed(2)) %>
        </span>
      </div>

      <div class="order-summary-row">
        <span class="order-summary-label">Delivery Charge :</span>
        <span class="order-summary-value">
          <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(orders.deliveryCharge.toFixed(2)) %>
        </span>
      </div>
      <% if (orders.discount > 0) { %>
        <div class="order-summary-row">
          <span class="order-summary-label">Discount (<%= orders.couponCode %>):</span>
          <span class="order-summary-value">
            -<%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(orders.discount.toFixed(2)) %>
          </span>
        </div>
      <% } %>
      <div class="order-summary-row order-summary-total">
        <span class="order-summary-label">Total (Incl. GST):</span>
        <span class="order-summary-value">
          <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(orders.finalAmount.toFixed(2)) %>
        </span>
      </div>

    </div>

    <div class="order-items">
      <h2 class="section-title">Order Items</h2>
      <% orders.orderItems.forEach(item => { %>
        <div class="order-item">
          <img src="/uploads/product-image/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>"
            class="item-image" style="width: 140px;">
          <div class="item-details">
            <h3 class="item-name"><%= item.product.productName %></h3>
            <p class="item-price">
              <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(item.price.toFixed(2)) %>
            </p>
            <p class="item-quantity">Quantity: <%= item.quantity %></p>
            <p class="item-quantity" style="margin-top: 3px; margin-bottom: -3px;">Size: <%= item.size %></p>
            <p class="item-status status-<%= item.status.toLowerCase().replace(' ', '-') %>"
              style="width: 15%; margin-top:15px; margin-left: -5px; text-align: center; border-radius: 20px;">
              <%= item.status %>
            </p>
          </div>
          <div class="item-actions">
            <% if (['Pending', 'Processing'].includes(item.status) && orders.paymentStatus !== 'Failed') { %>
              <button class="btn btn-cancel cancel-item-btn" data-product-id="<%= item.product._id %>">Cancel Item</button>
            <% } %>
            <% if (item.status === 'Delivered') { %>
              <button class="btn btn-return return-item-btn" data-product-id="<%= item.product._id %>">Return Item</button>
            <% } %>
          </div>
        </div>
      <% }) %>
    </div>

    <div class="order-actions" style="margin-top: 20px; text-align: right;">
      <% 
        const activeItems = orders.orderItems.filter(item => item.status !== 'Cancelled').length;
        const cancellableItems = orders.orderItems.filter(item => ['Pending', 'Processing'].includes(item.status)).length;
        const returnableItems = orders.orderItems.filter(item => item.status === 'Delivered').length;
      %>
      <% if (activeItems > 1 && cancellableItems > 1) { %>
        <button class="btn btn-cancel" id="cancelOrderBtn">Cancel Entire Order</button>
      <% } %>
      <% if (activeItems > 1 && returnableItems > 1) { %>
        <button class="btn btn-return" id="returnOrderBtn">Return Entire Order</button>
      <% } %>
    </div>
  </div>

  <!-- Cancel Order Modal -->
  <div id="cancelModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Cancel Order</h3>
        <span class="close-modal">×</span>
      </div>
      <form id="cancelForm">
        <input type="hidden" id="cancelType" name="cancelType" value="order">
        <input type="hidden" id="productId" name="productId" value="">
        <div class="form-group">
          <label for="cancelReasonSelect">Reason for cancellation (required):</label>
          <select id="cancelReasonSelect" name="reasonSelect">
            <option value="">Select a reason</option>
            <option value="Changed my mind">Changed my mind</option>
            <option value="Found a better price elsewhere">Found a better price elsewhere</option>
            <option value="Ordered by mistake">Ordered by mistake</option>
            <option value="Delivery too slow">Delivery too slow</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="form-group">
          <label for="cancelReason">Additional details (required):</label>
          <textarea id="cancelReason" name="reason"
            placeholder="Please provide more details about your cancellation..." minlength="5"></textarea>
          <small class="char-counter" id="cancelReasonCounter">0 characters (minimum 5)</small>
          <p class="error-message" id="cancelError" style="display: none;"></p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary close-cancel-modal">Close</button>
          <button type="submit" class="btn btn-primary">Submit Cancellation</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Return Order Modal -->
  <div id="returnModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Return Order</h3>
        <span class="close-modal">×</span>
      </div>
      <form id="returnForm">
        <input type="hidden" id="returnType" name="returnType" value="order">
        <input type="hidden" id="returnProductId" name="productId" value="">
        <div class="form-group">
          <label for="returnReasonSelect">Reason for return (required):</label>
          <select id="returnReasonSelect" name="reasonSelect">
            <option value="">Select a reason</option>
            <option value="Defective product">Defective product</option>
            <option value="Wrong item received">Wrong item received</option>
            <option value="Item doesn't fit">Item doesn't fit</option>
            <option value="Not as described">Not as described</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="form-group">
          <label for="returnReason">Additional details (required):</label>
          <textarea id="returnReason" name="reason" placeholder="Please provide more details about your return..."
            minlength="10"></textarea>
          <small class="char-counter" id="returnReasonCounter">0 characters (minimum 10)</small>
          <p class="error-message" id="returnError" style="display: none;"></p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary close-return-modal">Close</button>
          <button type="submit" class="btn btn-primary">Submit Return</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const cancelOrderBtn = document.getElementById('cancelOrderBtn');
      const cancelItemBtns = document.querySelectorAll('.cancel-item-btn');
      const cancelModal = document.getElementById('cancelModal');
      const closeCancelModal = document.querySelector('.close-cancel-modal');
      const cancelForm = document.getElementById('cancelForm');
      const cancelError = document.getElementById('cancelError');

      const returnOrderBtn = document.getElementById('returnOrderBtn');
      const returnItemBtns = document.querySelectorAll('.return-item-btn');
      const returnModal = document.getElementById('returnModal');
      const closeReturnModal = document.querySelector('.close-return-modal');
      const returnForm = document.getElementById('returnForm');
      const returnError = document.getElementById('returnError');

      function validateCancelForm() {
        const reasonSelect = document.getElementById('cancelReasonSelect').value.trim();
        const reason = document.getElementById('cancelReason').value.trim();

        if (!reasonSelect) {
          cancelError.textContent = 'Please select a cancellation reason';
          cancelError.style.display = 'block';
          return false;
        }

        if (!reason) {
          cancelError.textContent = 'Please provide additional details for cancellation';
          cancelError.style.display = 'block';
          return false;
        }

        if (reason.length < 5) {
          cancelError.textContent = 'Additional details must be at least 5 characters';
          cancelError.style.display = 'block';
          return false;
        }

        cancelError.style.display = 'none';
        return true;
      }

      function validateReturnForm() {
        const reasonSelect = document.getElementById('returnReasonSelect').value.trim();
        const reason = document.getElementById('returnReason').value.trim();

        if (!reasonSelect) {
          returnError.textContent = 'Please select a return reason';
          returnError.style.display = 'block';
          return false;
        }

        if (!reason) {
          returnError.textContent = 'Please provide additional details for return';
          returnError.style.display = 'block';
          return false;
        }

        if (reason.length < 10) {
          returnError.textContent = 'Additional details must be at least 10 characters';
          returnError.style.display = 'block';
          return false;
        }

        returnError.style.display = 'none';
        return true;
      }

      document.getElementById('cancelReason').addEventListener('input', function () {
        const count = this.value.trim().length;
        document.getElementById('cancelReasonCounter').textContent =
          `${count} characters (minimum 5)`;
        if (this.value.trim().length > 0) {
          validateCancelForm();
        }
      });

      document.getElementById('returnReason').addEventListener('input', function () {
        const count = this.value.trim().length;
        document.getElementById('returnReasonCounter').textContent =
          `${count} characters (minimum 10)`;
        if (this.value.trim().length > 0) {
          validateReturnForm();
        }
      });

      document.getElementById('cancelReasonSelect').addEventListener('change', validateCancelForm);
      document.getElementById('returnReasonSelect').addEventListener('change', validateReturnForm);

      if (cancelOrderBtn) {
        cancelOrderBtn.addEventListener('click', function () {
          document.getElementById('cancelType').value = 'order';
          document.getElementById('productId').value = '';
          cancelModal.style.display = 'block';
        });
      }

      cancelItemBtns.forEach(btn => {
        btn.addEventListener('click', function () {
          document.getElementById('cancelType').value = 'item';
          document.getElementById('productId').value = this.getAttribute('data-product-id');
          cancelModal.style.display = 'block';
        });
      });

      if (returnOrderBtn) {
        returnOrderBtn.addEventListener('click', function () {
          document.getElementById('returnType').value = 'order';
          document.getElementById('returnProductId').value = '';
          returnModal.style.display = 'block';
        });
      }

      returnItemBtns.forEach(btn => {
        btn.addEventListener('click', function () {
          document.getElementById('returnType').value = 'item';
          document.getElementById('returnProductId').value = this.getAttribute('data-product-id');
          returnModal.style.display = 'block';
        });
      });

      document.querySelectorAll('.close-modal').forEach(btn => {
        btn.addEventListener('click', function () {
          cancelModal.style.display = 'none';
          returnModal.style.display = 'none';
        });
      });

      if (closeCancelModal) {
        closeCancelModal.addEventListener('click', function () {
          cancelModal.style.display = 'none';
        });
      }

      if (closeReturnModal) {
        closeReturnModal.addEventListener('click', function () {
          returnModal.style.display = 'none';
        });
      }

      window.addEventListener('click', function (event) {
        if (event.target === cancelModal) {
          cancelModal.style.display = 'none';
        }
        if (event.target === returnModal) {
          returnModal.style.display = 'none';
        }
      });

      cancelForm.addEventListener('submit', function (e) {
        e.preventDefault();

        if (!validateCancelForm()) {
          return;
        }

        const formData = new FormData(cancelForm);
        const data = Object.fromEntries(formData.entries());
        submitCancellation(data);
      });

      returnForm.addEventListener('submit', function (e) {
        e.preventDefault();

        if (!validateReturnForm()) {
          return;
        }

        const formData = new FormData(returnForm);
        const data = Object.fromEntries(formData.entries());
        submitReturn(data);
      });

      async function submitCancellation(data) {
        try {
          const orderId = '<%= orders.orderID %>';
          const url = data.cancelType === 'order'
            ? `/cancel-order/${orderId}`
            : `/cancel-order/${orderId}?productId=${data.productId}`;

          console.log('Sending cancellation request to:', url, 'with data:', data);

          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              reason: `${data.reasonSelect}: ${data.reason}`
            })
          });

          const result = await response.json();
          console.log('Cancellation response:', result);

          if (result.success) {
            Swal.fire({
              title: 'Success!',
              text: 'Your cancellation request has been submitted.',
              icon: 'success',
              confirmButtonColor: '#8b5a2b'
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: result.message || 'Failed to process cancellation',
              icon: 'error',
              confirmButtonColor: '#8b5a2b'
            });
          }
        } catch (error) {
          console.error('Error submitting cancellation:', error);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred while processing your request',
            icon: 'error',
            confirmButtonColor: '#8b5a2b'
          });
        } finally {
          cancelModal.style.display = 'none';
        }
      }

      async function submitReturn(data) {
        try {
          const orderId = '<%= orders.orderID %>';
          const url = data.returnType === 'order'
            ? `/return-order/${orderId}`
            : `/return-order/${orderId}?productId=${data.productId}`;

          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              reason: `${data.reasonSelect}: ${data.reason}`
            })
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire({
              title: 'Success!',
              text: 'Your return request has been submitted.',
              icon: 'success',
              confirmButtonColor: '#8b5a2b'
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: result.message || 'Failed to process return',
              icon: 'error',
              confirmButtonColor: '#8b5a2b'
            });
          }
        } catch (error) {
          console.error('Error submitting return:', error);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred while processing your request',
            icon: 'error',
            confirmButtonColor: '#8b5a2b'
          });
        } finally {
          returnModal.style.display = 'none';
        }
      }

      document.querySelectorAll('.pay-now-btn, .retry-payment-btn').forEach(btn => {
        btn.addEventListener('click', async function () {
          const orderId = this.getAttribute('data-order-id');
          const isPayNow = this.classList.contains('pay-now-btn');
          const actionText = isPayNow ? 'Pay Now' : 'Retry Payment';

       
          const result = await Swal.fire({
            title: `Confirm ${actionText}`,
            text: `Are you sure you want to proceed with the payment?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#8b5a2b',
            cancelButtonColor: '#dc3545',
            confirmButtonText: 'Yes, proceed',
            cancelButtonText: 'Cancel'
          });


          if (!result.isConfirmed) {
            return;
          }

          // Proceed with payment if confirmed
          try {
            const endpoint = isPayNow ? '/pay-now' : '/retry-razorpay-payment';
            const response = await fetch(endpoint, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ orderId })
            });
            const data = await response.json();

            if (!data.success) {
              Swal.fire({
                title: 'Error',
                text: data.message || 'Failed to initiate payment',
                icon: 'error',
                confirmButtonColor: '#8b5a2b'
              });
              return;
            }

            let paymentCompleted = false;

            const options = {
              key: '<%= process.env.RAZORPAY_KEY_ID %>',
              amount: data.order.amount,
              currency: 'INR',
              name: 'Jordan Express',
              description: 'Order Payment',
              order_id: data.order.id,
              handler: async function (response) {
                paymentCompleted = true;
                const verifyEndpoint = isPayNow ? '/verify-pay-now-payment' : '/verify-razorpay-payment';
                const verifyResponse = await fetch(verifyEndpoint, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                    orderId: data.orderId
                  }),
                });
                const verifyData = await verifyResponse.json();

                if (verifyData.success) {
                  Swal.fire({
                    title: 'Success!',
                    text: 'Payment successful!',
                    icon: 'success',
                    confirmButtonColor: '#8b5a2b'
                  }).then(() => {
                    window.location.reload();
                  });
                } else {
                  window.location.href = `/payment-failure?orderId=${data.orderId}`;
                }
              },
              prefill: {
                name: '<%= orders.userID?.name || "Customer" %>',
                email: '<%= orders.userID?.email || "" %>',
              },
              theme: {
                color: '#8b5a2b',
              },
              modal: {
                ondismiss: function () {
                  if (!paymentCompleted) {
                    Swal.fire({
                      title: 'Error',
                      text: 'Payment cancelled',
                      icon: 'error',
                      confirmButtonColor: '#8b5a2b'
                    });
                    window.location.href = `/payment-failure?orderId=${data.orderId}`;
                  }
                },
              },
            };

            const rzp = new Razorpay(options);

            rzp.on('payment.failed', function () {
              Swal.fire({
                title: 'Error',
                text: 'Payment failed',
                icon: 'error',
                confirmButtonColor: '#8b5a2b'
              });
              window.location.href = `/payment-failure?orderId=${data.orderId}`;
            });

            rzp.open();
          } catch (error) {
            console.error('Error initiating payment:', error);
            Swal.fire({
              title: 'Error',
              text: 'An error occurred while initiating payment',
              icon: 'error',
              confirmButtonColor: '#8b5a2b'
            });
          }
        });
      });
    });
  </script>
</body>

</html>